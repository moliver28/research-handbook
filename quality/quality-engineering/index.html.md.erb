---
layout: handbook-page-toc
title: "Quality Engineering Sub-Department"
description: "quality Engineering Sub-Department"
---

## On this page

{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .toc-list-icons .hidden-md .hidden-lg}

{::options parse_block_html="true" /}

- - -

## FY23 Direction

In FY23 we will be focused on innovative test architecture, efficiency, and customer results while delivering impact to the company's bottomline via alignment to the [top 12 cross-functional initiatives](https://about.gitlab.com/company/team/structure/working-groups/#12-cross-functional-initiatives). Key directional highlights: broaden our lead in ensuring self-managed excellence, improve deployment confidence, drive visibility and actionability of test results, and expand our Quality Architecture focus. In FY23 we anticipate continued momentum on enabling development and deployment at scale and it's more important than ever for us to deliver results.

### Self-Managed Excellence

Quality Engineering owns several tools which form a 3-prong trident for Self-Managed Excellence: the [GitLab Environment Toolkit (GET)](https://gitlab.com/gitlab-org/gitlab-environment-toolkit), the [GitLab Performance Tool (GPT)](https://gitlab.com/gitlab-org/quality/performance), and the [Reference Architectures (RA)](https://docs.gitlab.com/ee/administration/reference_architectures/). Together, these tools support our broader strategy of cementing customer confidence and contributing to their ongoing success by ensuring their instances are built to a rigorously tested standard that performs smoothly at scale. 

```mermaid
flowchart LR
  subgraph selfManageExcel["Self-Managed Excellence"]
    GET["GitLab Environment Toolkit (GET)"]
    GPT["GitLab Performance Tool (GPT)"]
    RA("Reference Architectures (RA)")
  end
  style selfManageExcel fill:#FFF
  style GET color:#6b4fbb, stroke:#9370DB
  style GPT color:#6b4fbb, stroke:#9370DB
  style RA color:#6b4fbb, stroke:#9370DB
  click GET "https://gitlab.com/gitlab-org/gitlab-environment-toolkit" _blank
  click GPT "https://gitlab.com/gitlab-org/quality/performance" _blank
  click RA "https://docs.gitlab.com/ee/administration/reference_architectures/" _blank
```

- Expanding [GitLab Environment Toolkit (GET)](https://gitlab.com/gitlab-org/gitlab-environment-toolkit), our established provisioning toolkit.
- Expanding [GitLab Performance Tool (GPT)](https://gitlab.com/gitlab-org/quality/performance), our performance testing tool for validation at scale.
- Maturing [Reference Architectures (RA)](https://docs.gitlab.com/ee/administration/reference_architectures/), our guidelines for ensuring performant environments.
- Built-in dashboard to allow administrator review of Reference Architecture adherence.
- Automated monitoring to proactively surface deviations or suggested environment improvements.
- Built-in tools to allow one-button environment validations.

### Quality Architecture

Given rapidly evolving technologies and our drive to provide a world class experience for GitLab users, Quality Engineering must meet the increasing demands of efficient, intelligent test coverage and confidence at scale. We must test the right things at the right time. To that end, this year we are exploring several new testing types and visibility improvements to increase the actionability, speed, and sophistication of our various test suites.

- Machine learning for test gap recognition, failure analysis and classification, and failing fast.
- New testing types: visual regression testing, chaos testing, contract testing, permissions testing.
- Automated test pyramid analysis and code coverage visibility through a central dashboard.
- Continuous identification of broken, slow, flaky, stale, or duplicated tests.
- Built-in, one-click templates for performance and contract testing.

### Customer Centric Quality

Quality Engineering has been key to supporting prospect POVs and providing prompt, knowledgeable troubleshooting for external customers, but we also have a deep commitment to supporting our internal customers as well. We will expand our Deploy with Confidence foundation we began last year in collaboration with our Infrastructure and Development Departments, and we will seek input into how our processes and tools can be improved.

- Expand & improve upon deploy with confidence work foundation.
- Outreach to understand user's needs of Reference Architectures.
- Expand the capability of staging environments according to engineers' needs.
- Increase customer empathy by participating in activities that highlights their painpoints.
- Burn down S2 bugs to improve user experience.

### Productivity
- Reduce manual burden for SET team members on-call.
- Improve test failure debugging through traceable test executions and streamlined, concise logging.
- Reduce duration of GitLab pipelines through selective test execution.
- Contribute quality tools to GitLab the product to help mature and dogfood our testing offerings.
- Increase MR Rate.

### Team Growth & Engagement
- Provide geo-diverse department activity and presence.
- Provide clear actionable career paths for all job families.
- Provide learning & growing opportunities for the management team.
- Collaborate with recruitment to ensure timely hiring.
- Every manager understands their team's MR Rate.

## Active Quarter OKRs

<iframe src="https://app.ally.io/public/LXRjSFaQpWM5PDC" class="dashboard-embed" height="1000" width="100%" style="border:none;"> </iframe>

## Previous Quarter OKRs

<iframe src="https://app.ally.io/public/mz3acmJoC4ZhQby" class="dashboard-embed" height="1000" width="100%" style="border:none;"> </iframe>

## Quality Engineering Structure

Quality Engineering is function under the Quality Department operating as several teams of Software Engineers in Test, each led by a Quality Engineering Manager reporting to the Quality Engineering Sub-Department Leader.

```mermaid
graph TD
    A[Quality Department]
    A --> B[Engineering Analytics Team]
    B --> BA[Engineering Analyst]
    B --> BB[Engineering Analyst]
    A --> C(Quality Engineering)
    C --> CA(Quality Engineering Team)
    CA --> CAA[Software Engineer in Test]
    CA --> CAB[Software Engineer in Test]
    CA --> CAC[Software Engineer in Test]
    C --> CB(Quality Engineering Team)
    CB --> CBA[Software Engineer in Test]
    CB --> CBB[Software Engineer in Test]
    CB --> CBC[Software Engineer in Test]
    A --> D[Engineering Productivity Team]
    D --> DA[Engineering Productivity Engineer]
    D --> DB[Engineering Productivity Engineer]
    style C fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CA fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CAA fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CAB fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CAC fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CB fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CBA fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CBB fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style CBC fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
```

### Open roles

Quality Engineering is actively hiring! Please view [our jobs page](https://boards.greenhouse.io/gitlab) to read more and apply.

### Management team

<%
director_role = 'Director of Quality Engineering'
manager_role = 'Quality Engineering Manager'
roles_regexp = /(Engineer in Test)/
%>

<%= shared_team_members(role_regexps: [/(Director of Quality Engineering|Quality Engineering Manager)/i]) %>

### Individual contributors

<%= stable_counterparts(role_regexp: roles_regexp, direct_manager_role: manager_role) %>

## Engage with Us

Feel free to reach out to us by opening an issue on the [Quality Team Tasks project](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues) or contacting us in one of the Slack channels listed below.

| Team                           | GitLab.com handle  | Slack channel | Slack handle |
| ------------------------------ | ------------------ | ------------- | ------------ |
| Quality Engineering            | [`@gl-quality/qe-sub-dept`](https://gitlab.com/gl-quality/qe-sub-dept) | [#quality](https://gitlab.slack.com/archives/C3JJET4Q6) | None |
| [Dev QE team](dev-qe-team)     | [`@gl-quality/dev-qe`](https://gitlab.com/gl-quality/dev-qe) | [#g_qe_dev](https://gitlab.slack.com/archives/CU90UDHC6) | `@dev-qe-team` |
| [Ops QE team](ops-qe-team) | [`@gl-quality/ops-qe`](https://gitlab.com/gl-quality/ops-qe) | [#g_qe_ops](https://gitlab.slack.com/archives/CUGNRS97V) | `@ops-qe-team` |
| [Sec & Enablement QE team](sec-enablement-qe-team) | [`@gl-quality/enablement-qe`](https://gitlab.com/gl-quality/enablement-qe) | [#g_qe_enablement_secure](https://gitlab.slack.com/archives/CTP7N0PM4) | `@enablement-secure-qe-team` |
| [Fulfillment & Growth QE team](fulfillment-growth-qe-team) | [`@gl-quality/fulfillment-qe`](https://gitlab.com/gl-quality/fulfillment-qe) | [#g_qe_fulfillment_growth](https://gitlab.slack.com/archives/C014UQAC8JW) |`@fulfillment-growth-qe-team` |

## How we Work

While this team operates as a several teams, we emphasize on ensuring the prioritization and needs of Engineering Leaders via stable counterparts.

### Stable counterparts

Every Software Engineer in Test (SET) takes part in building our product as a DRI in [GitLab's Product Quad DRIs](/handbook/product/product-processes/#pm-em-ux-and-set-quad-dris).
They work alongside Development, Product, and UX in the [Product Development Workflow](/handbook/product-development-flow/#build-phase-1-plan).
As stable counterparts, SETs should be considered critical members of the core team between Product Designers, Engineering Managers and Product Managers.

- SETs should receive invites and participate in all relevant product group collaborations (meeting recordings, retro issues, planning issues, etc).
- SETs should operate proactively, not waiting for other stable counterparts to provide them direction.
The area a Software Engineer in Test is responsible for is defined in the [Product Stages and Groups](/handbook/product/categories/#hierarchy) and part of their title.

Every Quality Engineering Manager is aligned with an Engineering Director in the Development Department.
They work at a higher level and align cross-team efforts which maps to a [Development Department section](/handbook/product/categories/#hierarchy).
The area a Quality Engineering Manager is responsible for is defined in the [Product Stages and Groups](/handbook/product/categories/#hierarchy) and part of their title.
This is with the exception of the Engineering Productivity team which is based on the [span of control](/company/team/structure/#management-group).

## Building as part of GitLab

- **GitLab features first**: Where possible we will implement the tools that we use as GitLab features.
- **Build vs buy**: If there is a sense of urgency around an area we may consider buying/subscribing to a service to solve our Quality challenges in a timely manner.
This is where building as part of GitLab is not immediately viable. An issue will be created to document the decision making process in our [team task](https://gitlab.com/gitlab-org/quality/team-tasks) issue tracker.
This shall follow our [dogfooding](/handbook/engineering#dogfooding) process.

## Processes

### General tips and tricks

We have compiled a number of tips and tricks we have found useful in day-to-day Quality Engineering related tasks.

For more information, please visit our [tips and tricks page](tips-and-tricks).

### On-call rotations

The Quality Engineering Sub-Department has two on-call rotations: pipeline triage (SET-led) and incident management (QEM-led). These are scheduled in advance to share the responsibilities of debugging pipeline failures and representing Quality in incident responses.

For more information, please visit our [on-call rotation page](oncall-rotation).

### Quad planning

The Quality Engineering Sub-Department helps facilitate the quad-planning process.
This is the participation of Product Management, Development, UX, and Quality which aims to bring test planning as a topic before the development of any feature.

For more information, please visit our [quad planning page](quad-planning).

### Reliable tests

Reliable tests have met stricter reliability criteria than other tests in our test suite. When a failure is seen in a reliable test, it's less likely to be flakiness and more likely to be a true issue.

For more information, please visit our [reliable tests page](reliable-tests).

### Risk mapping

The Quality Engineering Sub-Department helps facilitate the risk mapping process. This requires the participation of Product Management, Development, UX, and the Quality team to develop a strategic approach to risk and mitigation planning.

For more information, please visit our [risk mapping page](risk-mapping).

### Test engineering

The Quality Engineering Sub-Department helps facilitate the test planning process for all things related to Engineering work.

For more information, please visit our [test engineering page](test-engineering).

### Test failures

If you need to debug a test failure, please visit our [debugging QA pipeline test failures page](debugging-qa-test-failures).

## Submitting and reviewing code

For test automation changes, it is crucial that every change is reviewed by at least one Senior Software Engineer in Test in the Quality team.

We are currently setting best practices and standards for Page Objects and REST API clients. Thus the first priority is to have test automation related changes reviewed and approved by the team.
For test automation only changes, the Quality Engineering Sub-Department alone is adequate to review and merge the changes.

## Weights

We use Fibonacci Series for weights and limit the highest number to 8. The definitions are as below:

| Weight | Description |
| ------ | ----------- |
| 1 - Trivial | Simple and quick changes (e.g. typo fix, test tag update, trivial documentation additions) |
| 2 - Small | Straight forward changes, no underlying dependencies needed. (e.g. new test that has existing factories or page objects) |
| 3 - Medium | Well understood changes with a few dependencies. Few surprises can be expected. (e.g. new test that needs to have new factories or page object / page components) |
| 5 - Large | A task that will require some investigation and research, in addition to the above weights (e.g. Tests that need framework level changes which can impact other parts of the test suite) |
| 8 - X-large | A very large task that will require much investigation and research. Pushing initiative level |
| 13 or more | Please break the work down further, we do not use weights higher than 8. |

## Performance Indicators

TBA

## Learning Resources

We have compiled a list of learning resources that we've found useful for Software Engineer in Test and Quality Engineering Manager growth.

For more information, please visit our [learning resources page](learning-resources).
