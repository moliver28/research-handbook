---
layout: handbook-page-toc
title: "Reliability Engineering"
---
## On this page

{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

If you are a GitLab team member and are looking to alert Reliability Engineering about an availability issue with GitLab.com, please find quick instructions to report an incident here: [Reporting an Incident](/handbook/engineering/infrastructure/incident-management/#reporting-an-incident).
{: .alert .alert-danger}

If you are a GitLab team member looking for assistance from Reliability Engineering, please see the [Getting Assistance](#getting-assistance) section.
{: .alert .alert-info}

## Who We Are

Reliability Engineering is responsible for all of GitLab's user-facing services, with their primary responsibility being GitLab.com. Site Reliability Engineers (SREs) ensure the availability of these services, building the tools and automation to monitor and enable this availability. These user-facing services include a multitude of environments, including staging, GitLab.com, and dev.GitLab.org, among others (see the [list of environments](/handbook/engineering/infrastructure/environments/)).

## Vision

**Reliability Engineering** ensures that GitLab's customers can rely on GitLab.com for their mission-critical workloads. We approach availability as an engineering challenge and empower our counterparts in Development to make the best possible infrastructure decisions. We own and iterate often on [how we manage incidents](/handbook/engineering/infrastructure/incident-management/) and continually derive and share our learnings by conducting [thorough reviews of those incidents](/handbook/engineering/infrastructure/incident-review/).

## Getting Assistance

If you're a GitLab team member and are looking to alert Reliability Engineering about an availability issue with GitLab.com, please find quick instructions to report an incident here: [Reporting an Incident](/handbook/engineering/infrastructure/incident-management/#reporting-an-incident).
{: .alert .alert-danger}

If you'd like our assistance, please use one of the issue generation templates below and the work will be routed appropriately:

- [Open a General Request Issue](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/new?issuable_template=default) - follow this link to create a general issue for the Reliability Team.
- [Open a Customer Questions and Sales Enablement Issue](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/new?issuable_template=request-sales-enablement) - follow this link to seek assistance in answering questions for prospects or current customers.
- [Open a request for Reliability to join customer call](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/new?issuable_template=sre_join_customer_call_request).

We can also be reached in Slack in the [#production](https://gitlab.slack.com/archives/C101F3796) channel for questions related to GitLab.com and in the [#infrastructure-lounge](https://gitlab.slack.com/archives/CB3LSMEJV) channel for all other questions.

## Tenets

1. [**Change Management**](/handbook/engineering/infrastructure/change-management/), [**Incident Management**](/handbook/engineering/infrastructure/incident-management/), [**Incident Review**](/handbook/engineering/infrastructure/incident-review/) and [**Delta Management**](/handbook/engineering/infrastructure/library/production/deltas/) are owned by Reliability Engineering.
1. Each team member is able to work on all team projects.
1. The team is able to reach conclusions independently all the time, consensus most of the time.
1. Career development paths are clear.
1. The team maintains a database of SRE knowledge through documentation, training sessions, and outreach.
1. We leverage the GitLab product where we can in our toolchain.

## How We Work

We maintain a single source of truth [epic](https://gitlab.com/groups/gitlab-com/gl-infra/-/epics/509) for the current state of project work assigned within squads. That epic references projects detailed in the form of sub-epics.

### How We Work -- General Workflow

1. Customers open new issues in [Reliability Issue Tracker](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues)
2. New issues go through a [management and prioritization process](https://about.gitlab.com/handbook/engineering/infrastructure/team/reliability/issues.html)
3. Issues are classified as either general or project work and added to the [backlog](https://gitlab.com/gitlab-com/gl-infra/reliability/-/boards/3993753?assignee_id=None)

### How We Work -- Sources of work

1. Issues generated by customers (teams outside Infrastructure) via one of the paths documented in the [Getting Assistance](#getting-assistance) section. These issues are automatically added to the triage backlog and are processed by Reliability managers.
1. Issues generated as [`Corrective Actions`](/handbook/engineering/infrastructure/incident-management/#sts=Corrective%20Actions) for incidents.
1. Issues generated as miscellaneous small tasks found in the day-to-day of an SRE/DBRE/EM
1. Issues generated as part of Project Work.

### Projects

- See the [Projects Page](/handbook/engineering/infrastructure/team/reliability/projects.html) for details on how projects are managed within the Reliability Team.

### How We Work -- Issues
Issues are filed and processed within the [Reliability Issue Tracker](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues).  Issues are assigned to engineers or [project squads](https://about.gitlab.com/handbook/engineering/infrastructure/team/reliability/projects.html#project-squads) based on based on [priority](https://about.gitlab.com/handbook/engineering/infrastructure/team/reliability/issues.html#issue-priority).  For a more detailed overview of how issues are triaged and prioritized, see the [issues page](https://about.gitlab.com/handbook/engineering/infrastructure/team/reliability/issues.html).

### How We Work -- Corrective Actions workflow

[Corrective Actions](https://about.gitlab.com/handbook/engineering/infrastructure/incident-management/#corrective-actions) are issues arising from incidents. See the link for the suggested way to create them.

We use [this board](https://gitlab.com/gitlab-com/gl-infra/reliability/-/boards/3164592?label_name[]=corrective%20action&label_name[]=team%3A%3AReliability) to track corrective actions work. Corrective Actions are also an important [performance indicator](https://about.gitlab.com/handbook/engineering/infrastructure/performance-indicators/#corrective-action-slo) for the Infrastructure Department.

Currently there is a squad assigned to this work with the focus of:

1. Refining all open CAs
1. Burning down the backlog of open CAs

The slack channel for that squad is [#infra-corrective-actions](https://gitlab.slack.com/archives/C033169NNTT). Anyone is welcome and encouraged to help with the work of CAs.

#### Refinement of open CAs

The process is as follows:

1. Choose an [open, unrefined `corrective action` issue](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues?sort=created_date&state=opened&label_name[]=corrective+action&label_name[]=workflow-infra::Triage) in the [GitLab Infrastructure Team / Reliability](https://gitlab.com/gitlab-com/gl-infra/reliability) project.
    - Issues with any of `severity::1`, `severity::2`, `priority::1`, `priority::2` should be prioritized for refinement.
1. Add the `workflow-infra::Under Review` label, and assign it to yourself.
    - This ensures that other engineers don't pick up the same issue for refinement asynchronously
    - Ideally issues shouldn't be left in `workflow-infra::Under Review` for extended periods of time. If you're not actively reviewing the issue, re-apply the `workflow-infra::Triage` label so someone else can pick it up for refinement.
1. Read the issue carefully, including any linked incidents, to get context.
    - If there are no linked incident(s), this issue may be mislabeled. Confirm with the issue creator and if there is no incident related to this issue:
        1. Remove the `corrective action` label
        1. Leave a comment explaining that corrective actions must be linked to incident(s). For general and project work, use the labels `work::general` and `work::project` (respectively)
        1. You're done refining this issue!
1. Ensure it has the right `severity::` label on it - this is the highest severity of linked incident(s). All `corrective action` issues should have a severity label as the [triage bot](https://gitlab.com/gitlab-com/gl-infra/triage-ops/-/blob/master/policies/reliability/corrective-actions.yml) enforces it.
1. Ensure it has the right `priority::` label on it, indicating the urgency of the issue. For guidance on priority level, see the engineering [triage handbook page](https://about.gitlab.com/handbook/engineering/quality/issue-triage/). When in doubt, feel free to ask the issue creator or other relevant engineers for input.
1. Based on the above, possible actions are:
    - Cancel the issue by adding the label `workflow-infra::Cancelled` and then closing the issue.
        - Perhaps because it is no longer relevant due to other changes in the infrastructure, whether already executed or planned?
        - Perhaps you consider it an infrequent enough or low priority problem that you don't think it is currently worth prioritizing the work given the team's current resources?
        - In either case, add a note to the issue explaining the reason for cancelling.
        - Don't hesitate to cancel old, low priority CAs. An issue can always be reopened if it is deemed to be an ongoing problem, in which case we can increase the severity/priority and reassess.
    - Indicate that this CA is ready for work by adding the label `workflow-infra::Ready`
        - This means that the issue is relevant, well scoped (to be able to be completed with at most a few days' engineering time), and has the necessary information and context for an engineer to pick up for work.
    - Promote to an Epic
        - Sometimes CAs are high priority but very large in scope (more than a few days' worth of work). In this case the CA can be promoted to an Epic. Update the description of the new epic to show that it was created from a CA and make sure that the incident is referenced and linked in that paragraph.
        - If it falls within the CA squad's scope, leave the Corrective Action label in place. Otherwise remove it with a note.
        - New issues that are created related to an Epic with a "corrective action" label should not get that label, so as not to artificially inflate the numbers for tracking purposes.
    - Move to another team/project
        - Sometimes it becomes clear that a particular corrective action is not an Infrastructure issue. Add a note and move the issue to the appropriate project. If the issue is the responsibility of a stage group, consider adding the `~infradev` label.
    - Needs more information
        1. If context is missing or scope is unclear, ping the relevant engineers or managers in the issue to gain clarity so that a determination can be made for one of the above four cases. Sometimes we bring issues we need more input on up for discussion at one of our weekly Reliability Discussion meetings for this purpose.
1. When refinement is complete and the issue has one of above outcomes, unassign yourself from the issue unless you know you will be the one taking on the work.
1. Sometimes when refining a series of Corrective Action issues, a pattern may emerge that indicates that perhaps project level work is called for. Feel free to create an issue explaining your findings and bring this to the attention of the current DRI for corrective actions and/or an engineering manager.

#### Working on CAs

1. Choose a CA from the `workflow-infra::Ready` column from the above linked board that has no engineer assigned to it. Start with the highest severity/priority level issue that you feel able to take on.
1. Assign yourself to the issue
1. Move it to the `workflow-infra::In Progress` column (or add the label `workflow-infra::In Progress` yourself)
1. Reach out to other engineers as needed for more context or pairing. CAs cover a very wide range of infrastructure areas, and you are not expected to know everything. Often it is much more efficient to pair with someone more knowledgable in that domain.
1. When the work is complete, move the issue to the `workflow-infra::Done` column (or add the label `workflow-infra::Done` yourself and the triage bot will close it for you soon enough).
