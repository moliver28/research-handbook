---
layout: handbook-page-toc
title: Engineering Analytics Data Cheat Sheet
---

## On this page
{:.no_toc}

- TOC
{:toc}

## Objectives for this page

A cheat sheet that Engineering Analysts can use to refer back to dashboards that our team owns, commonly used data models, how-tos, and quick tips. This is intended to be used for onboarding new analysts and as a reference for existing team members.

## Helpful resources

* [Tableau](https://about.gitlab.com/handbook/business-technology/data-team/platform/tableau/#tableau-project-architecture)
* [GitLab DBT Docs](https://gitlab-data.gitlab.io/analytics/#!/overview)
* [Data Team Handbook](https://about.gitlab.com/handbook/business-ops/data-team/)

## Quick links

* [Partials for engineering metrics](https://gitlab.com/gitlab-com/www-gitlab-com/-/tree/master/sites/handbook/source/handbook/engineering/metrics/partials) - used to populate dashboards on group pages
* [Chart helpers](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/helpers/quality_charts_helpers.rb)
* [Product stages](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/stages.yml)

## Commonly used data models

| Schema                | Table Name                     | Description |
| --------------        | -----------                    | ----------- |
| workspace_engineering | engineering_merge_requests     | This table is fitered down to all merge requests that directly affect our product.          | 
| workspace_engineering | engineering_issues             | This table is fitered down to all issues that directly affect our product.         | 
| workspace_engineering | internal_issues_enhanced       | Similar to `engineering_issues`, except it does not filter for only part of product issues |
| workspace_engineering | internal_issues                | Base for `workspace_engineering.engineering_issues`. We use this table to build other issue DBT models.|
| workspace_engineering | internal_merge_requests        | Base for `workspace_engineering.engineering_merge_requests`. We use this table to build other issue DBT models.|
| workspace_engineering | internal_notes                 | Shows MR/issue history including comments, commits, merges, assignments, etc. Most of what you find in the history section of an MR or issue will likely be captured in this table.         | 
| workspace_engineering | issues_history                 | Daily snapshot of issue. We use this for past due metrics. |
| workspace_engineering | merge_request_rate             | This DBT model filters for MR rate by group and department. |
| legacy                | employee_directory_analysis    | To explore employee job data such as titles, start date, job title specialities, department, etc. |
| legacy                | gitlab_dotcom_users_xf         | Table of all GitLab users including data such as user names. We use the email field in this table to map team members back to GitLab data. |

## Dashboards that our team owns

| Dashboard      | Description |
| -------------- | ----------- |
| [Top Engineering Metrics Dashboard](https://app.periscopedata.com/app/gitlab/1000952/Top-Engineering-Metrics-Dashboard)      |The metrics we find that are top of mind for all groups.|
| [Issue Types by Milestone](https://app.periscopedata.com/app/gitlab/1042933/Issue-Types-by-Milestone) |  Gitlab-org and Gitlab-com issues by type, subtype, and milestone. This was created as part of the [Cross-Functional Prioritization Working Group](https://about.gitlab.com/handbook/product/cross-functional-prioritization/). This dashboard is used to monitor the balance of new features, security fixes, availability work, performance improvements, bug fixes, etc. across departments/groups.|
| [Merge Request Types](https://app.periscopedata.com/app/gitlab/976817/Merge-Request-Types) |  Product MRs by type and group. This is used in tandem with the Issue Types by Milestone dashboard. |
| [Development Embedded Dashboard](https://app.periscopedata.com/app/gitlab/681347/Development-Embedded-Dashboard) | |
| [Quality Embedded Dashboard](https://app.periscopedata.com/app/gitlab/736012/Quality-Embedded-Dashboard) | |
| [Infrastructure Embedded Dashboard](https://app.periscopedata.com/app/gitlab/798401/Infrastructure-Embedded-Dashboard) | |
| [UX Embedded Dashboard](https://app.periscopedata.com/app/gitlab/736036/UX-Embedded-Dashboard) | |
| [Security Embedded Dashboard](https://app.periscopedata.com/app/gitlab/758795/AppSec---Application-and-Container-Vulnerability-Dashboard) | |



## How to create a DBT model

Depending on the type of data, you can create a DBT model in the appropriate schema. For example, if you are creating a DBT model of Engineering Merge Requests, you might be interested in creating the dbt model under the `workspace_engineering` schema. Here are the general steps:

1. Determine which schema your data will be queried from.
2. Create a .sql file in the associated [schema folder](https://gitlab.com/gitlab-data/analytics/-/tree/master/transform/snowflake-dbt/models). Don't forget to update the schema.yml as well. We recommend running and testing your script in Snowflake or a BI tool before creating an MR. When you create the MR, apply the `dbt model changes` template`. This outlines all the steps needed in order to successfully create a DBT model.
3. Under the most recent pipeline, find the `run_changed_models_sql` job (located in the third circle of the pipeline) and run this with the variable `ANCESTOR_TYPE` set to either + to build changed models and all upstream models or @ to test downstream models and pull in all dependencies. For example, `key = ANCESTOR_TYPE` and `value = +`. The workflow I used was to first run the run_changed_️clone_model_dbt_select with ANCESTOR_TYPE of +. Then I ran run_changed_models_sql without any variables. The former will copy over all of the tables needed to build the changed models and the latter will run only the changed models.
4. Once the pipeline passes, ask a member of the Engineering Analytics team to review.
5. Next in the approval process is a member of the Data team.

### How to test DBT model via command line


## FAQ

* I have an idea of a new metric I want to measure. Where do I start?
   - [Create an issue](https://gitlab.com/gitlab-org/quality/engineering-analytics/team-tasks/-/issues/new) in our team project and apply the relevant template. Please detail as much info as you can. The more we know, the quicker it'll take us to prioritize the request.
* I need to update a chart but don't know how to.
   - [Create an issue](https://gitlab.com/gitlab-org/quality/engineering-analytics/team-tasks/-/issues/new) in our team project and apply the relevant template. Please detail as much info as you can. The more we know, the quicker it'll take us to prioritize the request.
* I have questions about our data.
   - Is it specific to Engineering Data? If so, feel free to drop a note in #g-engineering-analytics or #data.
* I don’t see my group name in the dashboard filter.
   - The `team_group` filter is based off data from the [stages.yml](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/stages.yml) file. If your group name is not listed here, it will not populate in the filter.
* When I filter for my group in the dashboards, there is no data. Why is the dashboard empty?
   - The `team_group` filter is based off data from the [stages.yml](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/stages.yml) file. To map issues and merge requests back to their respective groups, we rely on the match between the `~group::%` label and the group name in the file. For example, for the Editor group, if the group name in the file is `Editor`, the matching group label should be `~group::Editor`. If the label does not match the group name (e.g., `~group::Editor-group`, we are unable to correctly map the issue or merge request to that group.
* How long does it take for an update in [stages.yml](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/stages.yml) file to reflect in the database?
   - Approximately 1-2 days.