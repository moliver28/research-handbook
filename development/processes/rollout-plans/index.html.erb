---
layout: handbook-page-toc
title: Rollout Plan Process for Development
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## About This Page

This page outlines the requirements, success criteria, and how-to's of a rollout plan within the Development department.


### Creating a rollout plan procedure

Rollout plans can be different for each project or issue that you need one for. At a minimum, your rollout plan should provide details on the expected result and information on how to validate that result was successful or not, as well as account for any risks or barriers that may impact the rollout. Here are some things to consider including in your rollout plan:

1. Expectations 
	1. Define what the expected outcome should be when the rollout plan is complete. How should things function? What will the user see? What details or metrics should the system provide? 
	1. Prepare for any _unexpected_ outcomes by documenting what might happen if the rollout is unsuccessful. What signs can you look for to know? How can you reduce the risk of having these unexpected outcomes?
	1. Document steps to take if things go wrong. This might include multiple tasks, such as engaging with the SRE team in a specific Slack channel or disabling a feature flag.
1. Metrics to observe
	1. Provide links to data that can be monitored to understand whether your expectations are being met. Data could be based on predefined searches from tools like Sentry, Sitespeed, Grafana, Kibana, or some of our other [monitoring tools](/handbook/engineering/monitoring/#monitoring).
1. Testing scenarios
	1. Define manual tests you can take during the rollout to confirm the rollout is working as expected.
	1. Engage with counterparts to ensure that necessary automated testing is passing.
	1. Account for different states of data during rollout, such as cached data or data that was in a previously valid state.
	1. Include a pre-check list to ensure you are [supporting multi-version compatibility / backwards compatibility](https://docs.gitlab.com/ee/development/multi_version_compatibility.html). 
1. Communication
	1. Include a communication plan that includes relevant stakeholders - such as other stage groups, departments, or by [engaging with Support](/handbook/support/managers/change-management.html) to communicate changes to users.
	1. Outline in the rollout plan locations to communicate or look for signals of an unsuccessful rollout - such as the #production Slack channel or new issues list.
1. Staging and Production checks
	1. Include any specific checks that need to be done when your changes are released on staging and production.

#### Additional rollout plan processes

There are additional rollout plan processes to keep yourself aware of:
- [Rolling out a low-risk feature flag](/handbook/product-development-flow/feature-flag-lifecycle/#rollout)
- [Rolling out a high-risk feature flag](/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process)
- [Running an experiment](/handbook/engineering/development/growth/experimentation/#experiment-rollout-issue)

### Examples of previous rollout plans
- [Preventing negative impacts on the system when there is potential to fail silently](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1085)
- [Creating a pre-check list before rolling out a major change](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1267#pre-check)
- [Rolling out an experiment behind a feature flag](https://gitlab.com/gitlab-org/gitlab/-/issues/281024)
- [Rolling out a feature flag](https://gitlab.com/gitlab-org/gitlab/-/issues/335799)