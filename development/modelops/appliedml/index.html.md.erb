---
layout: handbook-page-toc
title: Applied ML Group
description: "The Applied ML is focused on how to extend GitLab functionality to provide additional value by leveraging ML/AI."
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Vision

The applied ML group is focused on how to extend GitLab functionality to provide additional value by leveraging ML/AI. This group will build on existing successful GitLab categories and features to make them smarter, easier to use, and more intelligent.

Commit Virtual 2021: What the ML is up with DevOps and AI? A ModelOps Overview:

<figure class="video_container">
  <iframe src="https://www.youtube.com/watch?v=7mUgGFgab4E" frameborder="0" allowfullscreen="true"> </iframe>
</figure>


## How we work
- We work in accordance with our [GitLab values](/handbook/values/).
- We work [transparently](/handbook/values/#transparency) with nearly everything public.
- We get a chance to work on the things we want to work on.
- We have a [bias for action](/handbook/values/#bias-for-action).
- We make data-driven decisions.
- Everyone can contribute to our work.


## Direction

[Group direction](https://about.gitlab.com/direction/modelops/applied_ml/)

## Team members

The following people are permanent members of the Applied ML Group:

| Who | Role | 
| --- | --- |
| [Alexander Chueshev](https://about.gitlab.com/company/team/#achueshev) | Senior backend engineer |
| [Wayne Haber](https://about.gitlab.com/company/team/#whaber) | Engineering director and acting group EM |
| [Taylor McCaslin](https://about.gitlab.com/company/team/#tmccaslin) | Principal Product Manager |

## How to contact us

* Tag a team member in a merge request or issue
* Post a message in the #g_applied_ml channel (internal only)

## Initial focus

Our initial focus is to integrate the acquired UnReview technology into GitLab, starting with the establishment of the Applied ML team in June of 2021. In a nutshell, UnReview is a machine learning (ML) based solution for automatically identifying appropriate expert code reviewers. The [press release](https://about.gitlab.com/press/releases/2021-06-02-gitlab-acquires-unreview-machine-learning-capabilities.html) has more details on the acquisition. Additional information on the UnReview technology and the integration process can be found on the [project page](https://about.gitlab.com/handbook/engineering/development/modelops/appliedml/projects/unreview/).

## Project management process

Our team uses a hybrid of Scrum for our project management process. This process follows GitLab's [monthly milestone release cycle](/handbook/marketing/blog/release-posts/#monthly-releases).

### Workflow

Our team use the following workflow stages defined in the [Product Development Flow](/handbook/product-development-flow/#workflow-summary):

### Epic roadmap

We use an epic roadmap to track epic progress on a quarterly basis. 

### Issue boards

We use a [team specific issue board](https://gitlab.com/groups/gitlab-org/-/boards/2841258?scope=all&label_name[]=group%3A%3Aapplied%20ml) to track issue progress on a daily basis. Issue boards are our single source of truth for the status of our work. Issue boards should be viewed at the highest group level for visibility into all nested projects in a group.


### Iteration

We follow the [iteration process](/handbook/engineering/#iteration) outlined by the Engineering function.

### Weekly refinement

Refinement is the responsibility of every team member. Every Friday, Slack will post a refinement reminder in our group channel. During refinement, we make sure that every issue on the issue board is kept up to date with the necessary details and next steps.

Each engineer is expected to provide a quick async issue update by commenting on their assigned issues using the following template:

```
<!---
Please be sure to update the workflow labels of your issue to one of the following (that best describes the status)"
- ~"workflow::In dev"
- ~"workflow::In review"
- ~"workflow::verification"
- ~"workflow::blocked"
-->
### Async issue update
1. Please provide a quick summary of the current status (one sentence).
1. When do you predict this feature to be ready for maintainer review?
1. Are there any opportunities to further break the issue or merge request into smaller pieces (if applicable)?
1. Were expectations met from a previous update? If not, please explain why.
```

We do this to encourage our team to be more async in collaboration and to allow the community and other team members to know the progress of issues that we are actively working on.

### Milestone Planning and Timeline

Our team follows the [Product Development Timeline](/handbook/engineering/workflow/#product-development-timeline) as our group is dependent on the [GitLab self-managed release cycle](https://about.gitlab.com/upcoming-releases/).

### Issue labels

We use issue labels to keep us organized. Every issue has a set of required labels that the issue must be tagged with. Every issue also has a set of optional labels that are used as needed.

**Required labels**
- Stage: `~devops::modelops`
- Group: `~group::applied ML`

### Merge request labels

MR labels can mirror issue labels (which is automatically done when created from an issue), but only certain labels are required for correctly [measuring engineering performance](#measuring-engineering-performance).

**Required labels**
- Stage: `~devops::modelops`
- Group: `~group::applied ML`

### Milestones

We tag each issue and MR with the planned milestone or the milestone at time of completion.

## Team Meetings

Our group holds synchronous meetings to gain additional clarity and alignment on our async discussions. We aspire to record all of our meetings as our team members are spread across several time zones and often cannot attend at the scheduled time.

We have a weekly team meeting at 8am Pacific on Thursdays.

Meetings will be in the [`Applied ML Group` playlist in GitLab Unfiltered](https://www.youtube.com/playlist?list=PL05JrBw4t0Kp5fbMFUOKl-uroknEjofJ3)

