---
layout: handbook-page-toc
title: "Plan Stage"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

# Plan
{: #welcome}

Plan teams:

- [Plan:Project Management Team](/handbook/engineering/development/dev/plan-project-management/)
- [Plan:Product Planning Team](/handbook/engineering/development/dev/plan/product-planning/)
- [Plan:Optimize Team](/handbook/engineering/development/dev/plan/optimize/)
- [Plan:Knowledge Team](/handbook/engineering/development/dev/plan/knowledge/)

The responsibilities of this collective team are described by the [Plan stage](/handbook/product/categories/#plan-stage). Among other things, this means
working on GitLab's functionality around issues, boards, milestones, to-do list, issue lists and filtering, roadmaps, time tracking, requirements management, notifications, value stream analytics (VSA), wiki, and pages.

- I have a question. Who do I ask?

In GitLab issues, questions should start by @ mentioning the Product Manager for the [corresponding Plan stage group](/handbook/product/categories/#plan-stage). GitLab team-members can also use [#s_plan](https://gitlab.slack.com/messages/C72HPNV97).

For UX questions, @ mention the Product Designers on the Plan stage; [Nick Leonard](https://gitlab.com/nickleonard) for Plan:Project Management, [Nick Brandt](https://gitlab.com/nickbrandt) for Plan:Product Planning, and [Libor Vanc](https://gitlab.com/lvanc) for Plan:Optimize. Plan:Knowledge should follow the [process for groups without a designer](/handbook/product/product-processes/product-mgt-operations/pm-operating-procedures/#what-if-your-team-doesnt-have-a-designer).

### How we work

- In accordance with our [GitLab values](/handbook/values/).
- Transparently: nearly everything is public, we record/livestream meetings whenever possible.
- We get a chance to work on the things we want to work on.
- Everyone can contribute; no silos.
- We do an optional, asynchronous daily stand-up in [#s_plan_standup](https://gitlab.slack.com/messages/CF6QWHRUJ).

### Workflow

We work in a continuous Kanban manner while still aligning with Milestones and [GitLab's Product Development Flow](/handbook/product-development-flow/).

#### Capacity Planning

When we're planning capacity for a future release, we consider the following:

1. Availability of the teams during the next release. (Whether people are out of the office, or have other demands on their time coming up.)
1. Work that is currently in development but not finished.
1. Historical delivery (by weight) per group.

The first item gives us a comparison to our maximum capacity. For instance, if the team has four people, and one of them is taking half the month off, then we can say the team has 87.5% (7/8) of its maximum capacity.

The second item is challenging and it's easy to understimate how much work is left on a given issue once it's been started, particularly if that issue is blocking other issues. We don't currently re-weight issues that carry over (to preserve the original weight), so this is fairly vague at present.

The third item tells us how we've been doing previously. If the trend is downwards, we can look to discuss this in our [retrospectives](#retrospectives).

Subtracting the carry over weight (item 2) from our expected capacity (the product of items 1 and 3) should tell us our capacity for the next release.

##### Historical capacity

<%= partial("handbook/engineering/development/dev/plan/historical_capacity") %>

#### Issues

Issues have the following lifecycle. The colored circles above each workflow stage represents the emphasis we place on collaborating across the entire lifecycle of an issue; and that disciplines will naturally have differing levels of effort required dependent upon where the issue is in the process. If you have suggestions for improving this illustration, you can leave comments directly on the [whimsical diagram](https://whimsical.com/2KEwLADzCJdDfPAb2CULk4).

![plan-workflow-example.png](plan-workflow-example.png)

Everyone is encouraged to move issues to different workflows if they feel they belong somewhere else. In order to keep issues constantly refined, when moving an issue to a different workflow stage, please review any open discussions within the issue and update the description with any decisions that have been made. This ensures that descriptions are [laid out clearly](https://about.gitlab.com/handbook/values/#say-why-not-just-what), keeping with our value of Transparency.

#### Epics

If an issue is `> 3 weight`, it should be promoted to an epic (quick action) and split it up into multiple issues. It's helpful to add a task list with each task representing a vertical feature slice (MVC) on the newly promoted Epic. This enables us to practice "Just In Time Planning" by creating new issues from the task list as there is space downstream for implementation. When creating new vertical feature slices from an epic, please remember to add the appropriate labels - `devops::plan`, `group::*`, `Category:*` or `feature label`, and the appropriate `workflow stage label` - and attach all of the stories that represent the larger epic. This will help capture the larger effort on the roadmap and make it easier to schedule.

#### Themes

A small number of high priority features will be chosen as 'themes' for a period of time. Themes provide an opportunity for the whole team to rally around a deliverable, even if they don't contribute directly to it. These items are given especially close attention by all those involved with a view to delivering small iterations and keeping work unblocked. There should never be more than two themes in progress at a time per team.

- A Slack channel is created with the convention #f_[feature name].
- An epic hierarchy is created with sub-epics mapping to iterations, each achievable within a milestone.
- Iterations are broken into multiple issues that can be accomplished independently, and PMs schedule those as normal.
- Other actions may be established, such as regular 'office hours' calls.

Team-members work together to continuously refine the iterations as complexity is revealed.

Examples of successful themes:

1. **Requirements Management** ([#f_requirements-management](https://app.slack.com/client/T02592416/CUEQBQ7K8), [Epic](https://gitlab.com/groups/gitlab-org/-/epics/2703))
1. **Jira Importer** ([#f_jira-importer](https://app.slack.com/client/T02592416/CUS6GB2JH), [Epic](https://gitlab.com/groups/gitlab-org/-/epics/2738))

#### Roadmap Organization

``` mermaid
graph TD;
  A["devops::plan"] --> B["group::*"];
  B --> C["Category:*"];
  B --> D["non-category feature"];
  C --> E["maturity::minimal"];
  C --> F["maturity::viable"];
  C --> G["maturity::complete"];
  C --> H["maturity::lovable"];
  E--> I["Iterative Epic(s)"];
  F--> I;
  G --> I;
  H --> I;
  D --> I;
  I--> J["Issues"];
```

### Talking With Customers

In a perfect world, we would have cross-functional representation in every conversation we have with customers. To help work towards realizing this, anyone who is scheduling a call with a customer via sales, conducting usabiity reasearch, or generally setting up a time to speak with customers or prospects is encouraged to add [the Plan Customer Interviews calender](https://calendar.google.com/calendar/u/0/embed?src=gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com) as an invitee to the event. This will automatically populate the shared calendar with upcoming customer and user iteractions. All team members are welcome and encouraged to join -- even if it's just to listen in and get context.

You can subscribe to the calendar and invite it as a participant in a customer meeting that you are scheduling using the URL [gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com](mailto:gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com).

### Board Refinement

We perform many board refinement tasks asynchronously, using GitLab issues
in the [Plan project]. The policies for these issues are defined in
[triage-ops/policies/plan-stage]. A full list of refinement issues is available
by [filtering by the ~"Plan stage refinement" label][refinement-issues].

[Plan project]: https://gitlab.com/gitlab-org/plan
[triage-ops/policies/plan-stage]: https://gitlab.com/gitlab-org/quality/triage-ops/tree/master/policies/plan-stage
[refinement-issues]: https://gitlab.com/gitlab-org/plan/issues?label_name%5B%5D=Plan+stage+refinement

### Tracking Committed Work for an Upcoming Release

While we operate in a continuous Kanban manner, we want to be able to report on and communicate if an issue or epic is on track to be completed by a Milestone's due date. To provide insight and clarity on status we will leverage [Issue/Epic Health Status](https://docs.gitlab.com/ee/user/project/issues/index.html#health-status) on priority issues.

### Keeping Health Status Accurate

At the beginning of the Milestone, Deliverable issues will automatically be updated to "On Track". As the Milestone progresses, assignees should update Health Status as appropriate to surface risk or concerns as quickly as possible, and to jumpstart collaboration on getting an issue back to "On Track". 

At specific points through the milestone the Health Status will be automatically degraded if the issue fails to progress. Assignees can override this setting any time if they disagree. The policy that manages this automation is [here](https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/groups/gitlab-org/hygiene/adjust-health-status.yml). It can be disabled for any individual issue by adding the ~"Untrack Health Status" label.

#### Health Status Definitions for Plan :

- _On Track_ - We are confident this issue will be completed and live for the current milestone
- _Needs Attention_ - There are concerns, new complexity, or unanswered questions that if left unattended will result in the issue missing its targeted release. Collaboration needed to get back On Track
- _At Risk_ - The issue in its current state will not make the planned release and immediate action is needed to rectify the situation

#### Flagging Risk is not a Negative

We feel it is important to document and communicate, that changing of any item's Health Status to "Needs Attention" or "At Risk" is not a negative action or something to be cause anxiety or concern. Raising risk early helps the team to respond and resolve problems faster and should be encouraged.

### OKRs

#### Active Quarter OKRs

FY24-Q3 Stage-level Objectives are available [here](https://gitlab.com/gitlab-com/gitlab-OKRs/-/issues/?sort=created_date&state=opened&label_name%5B%5D=devops%3A%3Aplan&label_name%5B%5D=division%3A%3AEngineering&not%5Blabel_name%5D%5B%5D=group%3A%3A%2a&type%5B%5D=objective&milestone_title=FY24-Q3&first_page_size=20).

* [Increase Visibility of Defects Delivered to Customers](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4152)
  * [Add Handbook Guidance on using the Regression label(s)](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4153)
  * [Publicize guidance on use of Regression labels](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4154)
  * [Measure regressions in Sisense](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4155)
* [Improve Work Items Test Suite](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4139)
  * [Identify and reduce flaky tests by 25](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4140)
  * [Improve feature test coverage of Work Items by 75%](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4141)
  * [Investigate the viability of generating screenshots from tests for visual testing](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4156)
* [Deliver on high priority product roadmap items](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/3750)
  * [Deliver Support for Multiple Environments in Pages](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/3760)
  * [Work towards feature parity between Work Items and Product Planning features](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/3878)
  * [Deliver 1 Clickhouse backed feature](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4084)
* [Complete IMOC training for eligible team-members](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4383)

In addition, Plan groups have KRs supporting an Objective to [Reach a 50% minimum of pajamas compliance for dropdowns](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/3885) in Q3:

* [Project Management](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4145)
* [Product Planning](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4078)
* [Optimize](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4080)
* [Knowledge](https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/4142)

#### Previous Quarter OKRs

FY24-Q2 Stage-level Objectives are available [here](https://gitlab.com/gitlab-com/gitlab-OKRs/-/issues/?sort=created_date&state=opened&label_name%5B%5D=devops%3A%3Aplan&label_name%5B%5D=division%3A%3AEngineering&not%5Blabel_name%5D%5B%5D=group%3A%3A%2a&type%5B%5D=objective&milestone_title=FY24-Q2&first_page_size=100).

```mermaid
flowchart LR
    POKR1[<strong>Dev + Analytics - Deliver on high priority product roadmap items</strong> <br> Dev Sub-Department Objective] -.- OKR1
    OKR1[<strong>Deliver on high priority Plan product roadmap items</strong> <br> Plan Stage Objective] --> 1KR1(<strong>Integrate VSM into Dashboards</strong><br> Optimize Group Key Result)
    OKR1 --> KR2(<strong>Deliver Clickhouse Value Stream Analytics</strong><br> Optimize Group Key Result)
    style POKR1 fill:#f6f6f6,stroke:#bbb,stroke-width:1px,color:#bbb
    click OKR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/3028"
    click 1KR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2985"
    click 1KR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2983"
    click POKR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2982"

    POKR2[<strong>Dev: Improve Frontend Engineering Efficency</strong> <br> Dev Sub-Department Objective] -.- OKR2
    OKR2[<strong>Be Competitive in Performance of Plan Features</strong> <br> Plan Stage Objective] --> 2KR1(<strong>Complete the refactoring of boards to use Vue Apollo</strong><br> Product Planning Group Key Result)
    OKR2 --> 2KR2(<strong>Roll out a WebSocket connection on the Issue List page</strong><br> Project Management Group Key Result)
    OKR2 --> 2KR3(<strong>Optimistically render assigned issues from the cache</strong><br> Project Management Group Key Result)
    OKR2 --> 2KR4(<strong>Determine if Elastic will suffice as a datastore for analytical queries</strong><br> Optimize Group Key Result)
    style POKR2 fill:#f6f6f6,stroke:#bbb,stroke-width:1px,color:#bbb
    click OKR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2358"
    click 2KR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2374"
    click 2KR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2375"
    click 2KR3 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2376"
    click 2KR4 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2703"
    click POKR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2029"

    POKR3[<strong>Dev: Improve Frontend Engineering Efficency</strong> <br> Dev Sub-Department Objective] -.- OKR3
    OKR3[<strong>Deliver 13 AI Features</strong> <br> Plan Stage Objective] --> 3KR1(<strong>Deliver 4 AI Features for Product Planning</strong><br> Product Planning Group Key Result)
    OKR3 --> 3KR2(<strong>Deliver 4 AI Features for Project Management</strong><br> Project Management Group Key Result)
    OKR3 --> 3KR3(<strong>Deliver 3 AI Features</strong><br> Optimize Group Key Result)
    OKR3 --> 3KR4(<strong>Deliver 2 AI Features</strong><br> Knowledge Group Key Result)
    style POKR3 fill:#f6f6f6,stroke:#bbb,stroke-width:1px,color:#bbb
    click OKR3 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2028"
    click 3KR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2597"
    click 3KR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2598"
    click 3KR3 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2599"
    click 3KR4 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2600"

    POKR4[<strong>No current Parent</strong> <br> No higher-level Objective] -.- OKR4
    OKR4[<strong>Improve Engineering Efficiency in Plan</strong> <br> Plan Stage Objective] --> 4KR1(<strong>Reduce Time Spent in Broken Master through Flaky Tests</strong><br> SEM Key Result)
    OKR4 --> 4KR2(<strong>Implement RCA for regressions in key features</strong><br> SEM Key Result)
    OKR4 --> 4KR3(<strong>Add seeding data scripts to our definition of done.</strong><br> Optimize Group Key Result)
    OKR4 --> 4KR4(<strong>Retroactively create seed scripts for all features </strong><br> Optimize Group Key Result)
    style POKR4 fill:#f6f6f6,stroke:#bbb,stroke-width:1px,color:#bbb
    click OKR4 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2355"
    click 4KR1 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2365"
    click 4KR2 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2368"
    click 4KR3 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2549"
    click 4KR4 href "https://gitlab.com/gitlab-com/gitlab-OKRs/-/work_items/2697"
```

#### Drafting OKRs using GitLab

Guidance is available, including a video guide, on [how to use GitLab for OKRs](https://about.gitlab.com/company/okrs/#how-to-use-gitlab-for-okrs).

GitLab currently offers some freedom in how to structure OKR hierarchies. We take the following approach in Plan:

* EMs are encouraged to create group-level KRs under stage-level Objectives directly, without creating their own OKR structure.
* Group KRs and Stage Objectives should ladder into a higher Objective, which can exist anywhere in the organization. In the development of OKRs a stage-level Objective laddered directly into a CEO KR.
* They should be created or added as **child objectives and key results** of their parent so that progress roll-ups are visible.
* Product development goals are established in milestone planning, following the regular [Product Development Flow](https://about.gitlab.com/handbook/product-development-flow/), and not in OKRs.

Doing this ensures the hierarchy will be as simple, consistent and shallow as possible. This improves navigability and visibility, as we currently don't have good hierarchy visualization for OKRs.

An example of a valid single OKR hierarchy is:

```mermaid
flowchart TD
    A[Plan Objective] --> B(Project Management KR)
    A --> C[Product Planning KR]
    A --> D[Optimize KR]
    A --> E[Knowledge KR]
    A --> K[Principal Engineer KR]
    A --> L[SEM KR]
```

Ownership is indicated using labels and assignee(s). The label indicates the group and/or stage, assignee the DRI.

OKRs should have the following labels:
* Group, Stage, and Section (as appropriate).
* Division (~"Division::Engineering") to distinguish from other functions.
* updates::[weekly, semi-monthly, monthly] depending on how often the OKR is expected to be updated by the DRI.

### Retrospectives

The Plan stage conducts [monthly retrospectives asynchronously using GitLab issues][retros]. Monthly retrospectives are performed in a Confidential Issue made Public upon Close. Confidentiality of these Issues while Open aligns with [GitLab SAFE Framework](https://about.gitlab.com/handbook/legal/safe-framework/).

The Plan Stage team encourages the use of Internal Notes as well to further adhere to SAFE Guidelines. Internal notes remain confidential to participants of the retrospective even after the issue is made public, including Guest users of the parent group. Dogfooding this feature aligns with an FY23 Q4 OKR of improving the GitLab Product development flow by driving the adoption of Plan features.

Examples of information that should remain Confidential per SAFE guidelines are any company confidential information that is not public, any data that reveals information not generally known or not available externally which may be considered sensitive information, and material non-public information.

The retrospective issue is created by a scheduled pipeline in the
[async-retrospectives] project. It is then updated once the milestone
is complete with shipped and missed deliverables. For more information on how
it works, see that project's README.

An EM from the Plan stage is assigned to each retrospective on a rotational
basis as the DRI for conducting and concluding the retrospective, along with
summary and corrective actions. The rotation for upcoming milestones is as follows:

| Milestone | DRI |
|---   | ---       |
| 16.6 | Donald Cook |
| 16.7 | Kushal Pandya |
| 16.8 | John Hope |
| 16.9 | Brandon Labuschagne |
| 16.10 | Donald Cook |
| 16.11 | Kushal Pandya |

The role of the DRI is to facilitate a psychologically safe environment where team-members
feel empowered to give feedback with candour. As such they should refrain from participating
directly. Instead they should publicise, conclude and make improvements to the retrospective
process itself.

#### Timeline

* **27th (Previous Month)** A retrospective issue is automatically created for the milestone in progress.
* **18th** The milestone is **closed** and open issues in the build phase are labelled with ~"missed deliverable".
* **21st** The issue description is automatically updated with shipped and missed deliverables and the team are tagged to add feedback.
* **4th (Next Month)** A final reminder is created automatically in #s_plan for final feedback.
* **5th (Next Month)** The DRI [concludes the retrospective](#concluding-the-retrospective).

#### Dogfooding Value Stream Analytics (VSA) in the Milestone Retrospective

To improve the retrospective data-driven experience, we are [dogfooding](https://about.gitlab.com/handbook/engineering/development/principles/#dogfooding) VSA to simplify the [data collection for the retrospective](https://gitlab.com/gitlab-org/plan/-/issues/753). This been done by automatically adding a link to the VSA of the current milestone filtered by group/stage to the retrospective.
With Value stream analytics (VSA) our team is getting visibility to the [lifecycle metrics](https://docs.gitlab.com/ee/user/group/value_stream_analytics/#lifecycle-metrics) of each milestone through the breakdown of the [end-to-end workflow into stages](https://docs.gitlab.com/ee/user/group/value_stream_analytics/#value-stream-stages). This allows us to identify bottlenecks and take action to [optimize actual flow of work](https://about.gitlab.com/blog/2023/06/26/three-steps-to-optimize-software-value-streams/).

For example, for the review phase, we are using VSA to count the [time between "workflow::in review" and "MR merged"](https://gitlab.com/groups/gitlab-org/-/analytics/value_stream_analytics?created_after=2023-03-01&created_before=2023-04-29&project_ids[]=278964&label_name[]=devops%3A%3Aplan&value_stream_id=779&stage_id=17092&sort=duration&direction=desc&page=1). With this data, we can identify:
   - MRs that were bottlenecked due to limited reviewers/maintainers capacity.
   - Types of work that move slower than other types.
   - Whether long review time originates from `same-team MR reviews` or `out-of-team MR reviews`.

Please leave your feedback in [this issue](https://gitlab.com/gitlab-org/plan/-/issues/759).

#### Concluding the Retrospective

The DRI is responsible for completing the following actions:
* Adding a comment to the retrospective issue summarizing actionable discussion items and suggesting corrective actions.
* Finding a DRI for each corrective action. Creating an issue in `gl-retrospectives/plan` for each is optional, but doing so and adding the ~"follow-up" label will ensure they're included automatically in the next retrospective.
* Recording a short summary video and sharing in #s_plan. This can be discussed in the next weekly team call and can be added to the Plan Stage playlist on Youtube so that it shows up on team pages.
* Closing the issue and making it public.

[async-retrospectives]: https://gitlab.com/gitlab-org/async-retrospectives
[retros]: https://gitlab.com/gl-retrospectives/plan/issues?scope=all&utf8=%E2%9C%93&state=all&label_name[]=retrospective

In both the summary comment and video the DRI should be particularly careful to ensure all information disclosed is [SAFE](https://about.gitlab.com/handbook/legal/safe-framework/). If the retrospective discussion contains examples of unSAFE information, the issue should not be made public.

### Regressions

Regressions contribute to the impression that the product is brittle and unreliable. They are a form of waste, requiring the original (lost) effort to be compounded further with a fix or a reversion and reimplementation of the intended behavior.

Engineering Managers are strongly encouraged to conduct a simple [Root Cause Analysis](https://about.gitlab.com/handbook/engineering/root-cause-analysis/#what-is-a-root-cause-analysis) (RCA) when a regression takes place in a feature owned by their group, in order to:

* Inform the author and reviewers of the original MR that it caused a regression.
* Define corrective actions that might prevent or reduce the likelihood of a similar regression in future.
* Identify trends or patterns that can lead to human error.

The following RCA format was trialed in a FY23 Q2 OKR. It can be posted as a comment on the original MR when the regression has been successfully reverted. 

```markdown
**Description of the regression:**
_One-line description of the regression in behavior._

**Bug report:** _[Issue link]_

`@author`` (if internal) `@approvers` Please could you reply to this comment, copying the questions below and giving some short answers?

1. Were you aware this MR was reverted in the course of your normal work (e.g. through email notification, general work process)?
1. Did you identify the problematic behavior before approving this MR?
1. If not, what would've made the regression more obvious during review?
1. What changes to our tooling or review process would have prevented this regression from being merged?
1. Were the steps to test the MR mentioned clearly in the description? Were they easy to follow?
1. Do you have any other comments/suggestions?
```

Please reassure the participants that the purpose is not to apportion blame but to gather data, identify causal factors and implement corrective actions - but ask for a swift and brief response while the information is still fresh.

### Plan Weekly Digest

#### Background

There are many company, team, process (and other) updates that are important to communicate to team members so that they are not missed. Besides that, there is other information important for day-to-day work. In Plan we use async Weekly updates, called Plan Weekly digest, to communicate these to our team members.

The Engineering Managers in the Plan stage alternate each week as the DRIs. There are 4 groups in the Plan stage, and one SEM, so every EM is the DRI roughly once / 5 weeks.

#### Process

1. A new confidential issue is created every **Monday, 8 UTC**. (automatically)
1. The issue is assigned to all Plan Engineering Managers.
1. The EM **responsible** for the content of the issue can be found in the schedule below but all other EMs can contribute to the issue as well.
1. On **Saturday, 8 UTC** all team members are alerted on the issue via a comment (automatically).
1. On Friday, 8 UTC (next week) the issue is closed.

#### DRIs

| Issue creation (auto) | DRI |
|---   | ---       |
| 2023-10-23 | Donald Cook |
| 2023-10-30 | Brandon Labuschagne |
| 2023-11-06 | Kushal Pandya |
| 2023-11-13 | Brandon Labuschagne |
| 2023-11-20 | Donald Cook |
| 2023-11-27 | Brandon Labuschagne |
| 2023-12-04 | Kushal Pandya |
| 2023-12-11 | John Hope |
| 2023-12-18 | Donald Cook |
| 2023-12-25 | John Hope |
| 2024-01-01 | Kushal Pandya |
| 2024-01-08 | John Hope |

#### Links

- [Current Weekly Digests](https://gitlab.com/gitlab-org/plan/-/issues/?sort=updated_desc&state=opened&label_name%5B%5D=weekly%20update&first_page_size=20)
- [Closed Weekly Digests](https://gitlab.com/gitlab-org/plan/-/issues/?sort=updated_desc&state=closed&label_name%5B%5D=weekly%20update&first_page_size=20)
- [Issue Template](https://gitlab.com/gitlab-org/plan/-/blob/master/.gitlab/issue_templates/plan-weekly-digest.md)

### Meetings

Most of our group meetings are recorded and publicly available on
YouTube in the [Plan group playlist][youtube].

<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL05JrBw4t0KoceqcTneOVmAzhEp6NinY0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

[youtube]: https://www.youtube.com/playlist?list=PL05JrBw4t0KoceqcTneOVmAzhEp6NinY0
#### Weekly group meeting

We hold a weekly team meeting where all team members across all functions are invited. We currently alternate the meeting time each week to be inclusive of our distributed team. The meeting is either EMEA (+Eastern US) friendly or APAC (+Western US) friendly. Regardless of the timezone we always record each meeting and post it to our youtube playlist.

The [agenda] follows this format:

1. Team updates: new hires, transfers, promotions, people leaving, etc.
1. Big-picture updates: these are typically either forward-facing
(vision statements), or backwards-looking (how a feature impacted
users, sales, etc.).
1. Issue-specific discussion and demos: any issues that people want to
share with the wider group, that can't be handled using our normal
asynchronous workflow.
1. Workflow: how we improve how we work together in future (including
updating this page).
1. Anything else.

If there are no agenda items eight hours prior to the call, the call will become an optional stage-wide social call where we have a group coffee chat, play games or lighting talk. Anyone can propose an activity.

[agenda]: https://docs.google.com/document/d/1cbsjyq9XAt9UYLIxDq5BYFk47VA5aaTeHfkY2dttqfk/edit

#### Links / References
- `~group::project management`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1285239)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aproject%20management)
- `~group::product planning`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1569369?not[milestone_title]=Backlog)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aproduct+planning)
- `~group::optimize`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1401511)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aoptimize)
- `~group::knowledge`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/5454834)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aknowledge)

#### Shared calendar

There is a shared Plan stage calendar which is used for visibility into meetings within the stage.
* To add this shared calendar to your Google Calendar do one of the following:
  * Visit this [link](https://calendar.google.com/calendar/u/1?cid=Y19iNzIwMjMxNzdmMDE4ZDYzMWM4NTJlZDFlODgyZTdmYTdhMDI0NGM4NjFmN2U4OWY5NjA4NTY4ODJkNWY1NDlhQGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20) (GitLab internal) from your browser.
  * Click the '+' next to 'Other calendars' in Google Calender, select 'Subscribe to calendar', paste `c_b72023177f018d631c852ed1e882e7fa7a0244c861f7e89f960856882d5f549a@group.calendar.google.com` into the form and hit enter.
* To add an event to the shared calendar, create an event on your personal calendar and add `Plan Shared` as a guest.

### Team Day

Team Days are organized on a semi-regular basis. During these events we take time to celebrate wins since the last team day, connect with each other in remote social activities, and have fun!

Anyone can organize a team day. It starts with creating a Team Day planning issue in the [plan-stage tracker](https://gitlab.com/gitlab-org/plan-stage/plan-engineering/-/issues) and then proceeding to find a suitable date.

#### Setting a date

A time-boxed vote no more than 3 months but no less than 1 month out has proven to be the most inclusive way to set a date so far. This allows enough time to organize sessions but is usually close enough to avoid colliding with off-sites, or other company-wide activities.

Including at least three major timezones, one for each of AMER, EMEA, and APAC, in the issue description allows people to better see how the day will be divided for them and what they can attend.

It's good practice to rotate the 'base' timezone of the Team Day to spread the opportunity for attendance. For example; the [FY23-Q4](https://gitlab.com/gitlab-org/plan-stage/plan-engineering/-/issues/787) Team Day was based on a full UTC day, the [FY24-Q3](https://gitlab.com/gitlab-org/plan-stage/plan-engineering/-/issues/100) on a full day AEST.

#### Sessions

The day is composed of sessions proposed and organized by team-members. These are typically allocated 1hr, though they can be longer or shorter. Sessions can be scheduled in advance to allow other team-members to plan their attendance and participation.

Sessions can be anything really, so long as it aligns with the [values](https://handbook.gitlab.com/handbook/values/). Team-members can organize a game, teach a skill, give a talk on something they know, or anything else they think others might enjoy.

Some examples of sessions we've had on previous team days include:

* A cooking class with a former professional chef.
* Watching a holiday film together.
* Lateral Thinking Games.
* A home woodworking workshop tour and demonstration.
* Remote games; such as Gartic Phone and Drawsaurus.

Free time slots can be used on the day to hold impromptu events requiring little or no preparation.

#### Participation

Participation in team day is encouraged for any team-member or stable counterpart in Plan. If you collaborate with Plan team-members on a regular basis you're also very welcome to attend.

Participating team-members are encouraged to drop non-essential work and take part in any sessions during the day that they wish to. Those assigned to essential work; such as critical bugs, incidents, or IMOC shifts, are encouraged to participate between their other obligations.

Team day is a normal workday for those choosing not to participate.

#### Expenses

Some sessions may require small purchases to participate fully; for example, ingredients for a cooking class or hosting of a private video game server.

Unless communicated in advance these are **not expensable**.

The DRI for organizing Team Day may pursue a budget for expenses under existing budgets; such as the [team building](https://about.gitlab.com/handbook/finance/expenses/#team-building) budget, or [fun budget](https://about.gitlab.com/handbook/engineering/development/#fy24-team-building-fun-budget). If successful it should be made clear to team-members well in advance:
* What purchases qualify for reimbursement.
* The policy the expense qualifies under; including handbook link, policy category, and classification in Navan.
* Any additional handbook guidance that will help team-members utilize the budget.

#### Past Team Days

* [2023-10-13 Team Day](https://gitlab.com/gitlab-org/plan-stage/plan-engineering/-/issues/1004)
* [2022-12-20 Holiday Party](https://gitlab.com/gitlab-org/plan-stage/plan-engineering/-/issues/787)

#### Tips for a Successful Team Day

* Watch out for [Daylight Savings Time](https://www.timeanddate.com/time/dst/) when organizing for Q1 and Q3. When the date is set, check that the timeszones in the planning issue still match the timezones in use on the day (for example, AEST vs. AEDT).
* Secure expense budget and communicate at least a week in advance of the Team Day.
* Ensure Google Calendar events are transferred from the planning issue to the Plan [Shared Calendar](#shared-calendar) a week in advance of the event date.
* Ensure everyone has access to the calendar, and have easy step-by-step directions for creating a new event on the calendar (Adding events to a shared calendar can be slightly confusing).
* Communicate this change in SSOT, and encourage participants to add their own sessions in the calendar as free slots.

### Team Process

Each group within the Plan stage follows GitLab's [product development flow](https://about.gitlab.com/handbook/product-development-flow/) and [process](https://about.gitlab.com/handbook/product/product-processes/). This allows for consistency across the stage, enables us to align with other stages and stable-counterparts, and enables us to clearly understand our throughput and velocity. We're currently focused on strictly following the process stated in the handbook, as opposed to creating our own local optimizations.

In some cases we need to dogfood a new Plan feature that may adjust our adherence to the GitLab's process. If that happens we assign a DRI responsible for setting the objective, reporting on the outcomes and facilitating feedback to ensure we prioritize improvements to our own product. This ensures we're not making a change for the sake of making changes, and gives us clarity into our own evaluation of a change to the product.
In some cases we need to dogfood a new Plan feature that may adjust our adherence to the GitLab's process. If that happens we assign a DRI responsible for setting the objective, reporting on the outcomes and facilitating feedback to ensure we prioritize improvements to our own product. This ensures we're not making a change for the sake of making changes, and gives us clarity into our own evaluation of a change to the product.

There are a couple of process-related improvements we'll continue to adopt:

- **Iterations:** We've recently started organizing the prioritized work in a given milestone into weekly iterations. This doesn't change any of the canonical process, and allows us to break a months worth of work into sizeable timeboxes. Intended outcome: Dogfood iterations (the feature), improve velocity and give more granular visibility into the progress of issues. DRI: @donaldcook

### Stage Working groups

Like all groups at GitLab, a working group is an arrangement of people from different functions. What makes a working group unique is that it has defined roles and responsibilities, and is tasked with achieving a high-impact business goal fast. A working group disbands when the goal is achieved (defined by exit criteria) so that GitLab doesn’t accrue bureaucracy.

Stage Working Groups are focused on initiatives that require collaboration between multiple groups within the stage. The structure of stage working groups is similar to [company-wide working groups](https://handbook.gitlab.com/handbook/company/working-groups/), with DRI and well-defined roles. The initiatives are driven by a stage-level product direction rather than an [Executive Sponsor](https://handbook.gitlab.com/handbook/company/working-groups/#executive-sponsor),
and can be formed of just Functional Leads and members who participate in fulfilling the exit criteria.

#### Active Stage Working Groups (alphabetic order)

1. [Epic Work Items Migration](/handbook/engineering/development/dev/plan/working-groups/epic-work-items-migration/)

### Product Outreach

There can be a gap in understanding between Engineering and Product on a team. We are experimenting with a pilot programme that will allow engineers to spend time in the world of Product, with the goal of greater mutual communication, understanding and collaboration. It helps us work more effectively as a team for better features.

#### Product Shadowing schedule

Engineering team-members can shadow a product stable-counterpart. Shadowing sessions last two working days, or the equivalent split over multiple days to maximize experience with different functions of the role. In particular, the session should include at least one customer call. To shadow a counterpart on the team:

1. Create an issue in the [plan](https://gitlab.com/gitlab-org/plan) project tracker using the `Product-Shadowing` template;
1. Create a WIP MR to this page to update the table below, adding your name and issue link, and
1. When your counterpart is assigned to the issue, add their name, remove WIP status and assign to your manager for review.

| Month | Engineering counterpart | Product counterpart | Issue link |
| ----- | ----------------------- | ------------------- | ---------- |
| 2020-07 | Charlie Ablett ([@cablett](https://gitlab.com/cablett)) | Keanon O'Keefe ([@kokeefe](https://gitlab.com/kokeefe)) | [gitlab-org/plan#118](https://gitlab.com/gitlab-org/plan/-/issues/118) |
| 2020-10 | Jan Provaznik ([@jprovaznik](https://gitlab.com/jprovaznik)) | Gabe Weaver ([@gweaver](https://gitlab.com/gweaver)) | [gitlab-org/plan#185](https://gitlab.com/gitlab-org/plan/-/issues/185) |

### Speed Runs

- Labels
    - [Scoped Labels](https://youtu.be/ebyCiKMFODg)
- Issues
    - [Description Change History](https://youtu.be/-JgfJSSLYlI)
- Epics
    - [Organize sub-Epics with the Epic Tree](https://youtu.be/TzRCan5ki6o)
- Requirements Management
    - [Requirements MVC](https://youtu.be/uSS7oUNSEoU)
    - [Satisfy Requirements from CI Pipeline](https://youtu.be/4m1mSEb2ywU)

### Engineering Scaling Targets

<%= partial("handbook/engineering/development/dev/plan/scalability_targets") %>

### Metrics

#### Plan xMAU

- [Project Management Performance Indicators](https://about.gitlab.com/handbook/product/performance-indicators/), [Issue Interactions Dashboard](https://app.periscopedata.com/app/gitlab/775807/Plan-xMAU-(monthly))
- [Product Planning Performance Indicators](https://about.gitlab.com/handbook/product/performance-indicators/)
