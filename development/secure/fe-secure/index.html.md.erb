On this page
{:.no_toc .hidden-md .hidden-lg}

TOC {:toc .hidden-md .hidden-lg}
Secure Frontend
The Secure Frontend team supports multiple groups beneath the Secure sub-department.

Team members
<%= direct_team(role_regexp: /[,&] Secure/, manager_role: 'Frontend Engineering Manager, Secure') %>

How to work with us
Given the number groups this team supports, we prefer to be aware of upcoming features as early as possible. During the time leading up to implementation we will strive to:

Understand the problem we are trying to solve.
Collaborate with the appropriate Backend team, Product Management and UX to identify an achievable MVC.
Work with the various Product Managers we support to understand relative priority.
We seek to have issues ready for backlog refinement activities by the 1st of each month, therefore allowing enough time for us to determine the appropriate implementation plan and finalize relative sizing of the candidate issues in a given release.

How to interface with the Quality team
Frontend Responsibilities
Being able to identify what code changes would likely break E2E or System level tests and informing quality
Not to write E2E tests, but to catch potential failures and communicate gaps in coverage before landing to master.
Quality Responsibilities
To inform #s_secure-frontend of any upcoming QA meetings that would be of interest to the team
TBD
Identifying potential breakages
Look to see if issue you are working on has existing test coverage. These are the tests likely to fail

You can verify that a suspected breakage exists by running the E2E tests locally or on Gitlab.com. We have a YouTube playlist with the relevant training.

Communicating changes that may break tests
Ping the DRI for quality assigned to Secure. You can find the person on the team page.

Read
How to triage a QA test pipeline failure
Beginner's guide to writing end-to-end tests
GitLab QA README
GitLab QA Scenarios
E2E info for GitLab developers
Indicating Status and Raising Risk
All Deliverable issues should be marked On Track at the beginning of a milestone. If there is concern with doing so, then we should discuss why. Issues that have not gone into review by the 8th may not have enough time to get merged. These should be considered Needs Attention or At Risk depending on their complexity and other factors.

Raising risk early is important. The more time we have, the more options we have. Follow these steps when raising or downgrading risk:

Update the Health Status in the issue:
On Track - there is no indication the work won't get merged by the 15th.
Needs Attention - the issue is blocked or has other factors that need to be discussed.
At Risk - the issue is in jeopardy of missing the merge cutoff of the 15th.
Add a comment about why the risk has increased or decreased.
Copy the Frontend Engineering Manager and Product Manager in a comment.
Copy the Backend Engineering Manager if there is associated backend work that may be impacted.
Note that an issue probably shouldn't go directly from On Track to At Risk. Consider a progression: On Track -> Needs Attention -> At Risk.

Issue Boards
Delivery Workflow Board shows issues across workflow stages for a milestone.
Assignee Distribution Board shows open issues distributed by assignee.
Assignee Distribution App is a work in progress Vue app used for milestone/capacity planning, health status analysis and progress review.
Refinement Issues List shows issues that need refinement.
Reaching out to us
#s_secure-frontend channel in Slack
@secure_fe for notifications in Slack
@gitlab-org/secure/frontend for notifications in GitLab
