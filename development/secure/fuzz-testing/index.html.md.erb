---
layout: handbook-page-toc
title: Fuzz Testing Group
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Fuzz Testing

The Fuzz Testing group at GitLab is charged with developing tooling and engines which perform [Fuzzing](/direction/secure/fuzz-testing/fuzz-testing/),

We develop code in primarily in the following repositories. The repositories are a mix of open-sourced and closed source repos. 

| Repo | Purpose  |
| --- | --- |
| [API Security](https://gitlab.com/gitlab-org/security-products/analyzers/api-fuzzing-src) | Private - The API Security tool performs API Fuzzing and API DAST scans  |
| [GitLab Protocol Fuzzer (CE)](https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce) | GitLab's Protocol Fuzzer (Community Edition), previously Peach Protocol Fuzzer 
| [GitLab Protocol Fuzzer (EE)](https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ee) | Private - GitLab's Protocol Fuzzer (Enterprise Edition), previously Peach Protocol Fuzzer, includes licensed components.
| [API Fuzzing E2E Tests](https://gitlab.com/gitlab-org/security-products/tests/api-fuzzing-e2e) | Private - API End to End Tests  |
|  |  |
| [GitLab Cov Fuzz](https://gitlab.com/gitlab-org/security-products/analyzers/gitlab-cov-fuzz-src) | Private- GitLab's coverage fuzzing orchestration that integrates fuzzing engines/results with GitLab CI and GitLab Security Dashboard |

### We have a lot of supporting repositories for our customers:

#### Open Source Fuzzers

| Repo | Purpose  |
| --- | --- |
| [JSfuzz](https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing) | Javascript Fuzzer
| [Pythonfuzz](https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing) | Python Fuzzer
| [Javafuzz](https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing) | Java Fuzzer


| Repo | Purpose  |
| --- | --- |
| [HAR Recorder](https://gitlab.com/gitlab-org/security-products/har-recorder) | A utility to record HAR files based on web traffic

#### Fuzzing Examples in Various Languages

| Repo | Purpose  |
| --- | --- |
| [Coverage Fuzzing Examples](https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing) | Coverage fuzzing examples in  7+ languages/Fuzzers

## How to Contact Us

- Slack channel: #g_secure-fuzz-testing
- GitLab mention: @gitlab-org/secure/fuzzing-be

## How We Work

The Fuzz Testing  group largely follows GitLab's [Product Development Flow](/handbook/product-development-flow/). 

Issues worked by this team are backend-centric and are typically in one the above repos, [vendored templates](https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Security), and GitLab's [Rails monolith](https://gitlab.com/gitlab-org/gitlab). At times, issues can require support from Secure's frontend team if UI changes are required. We will [require more notice](/handbook/engineering/development/secure/fe-secure#How-to-work-with-us) for initiatives like these.

### Team Organization

Our fuzz testing group works as two teams, a coverage guided team and an API Security/Fuzzing team.

### Technologies

- The API Security product is built using mostly C# with some small amounts of Python. Our engineers use Windows VMs for development.
- The coverage guided fuzzing team works primarily in Go, but is also responsible for maintaining the open source fuzzers in JSFuzz, Pythonfuzz, and Javafuzz.  The team also maintains the fuzzing examples in which we aim to cover all major programming languages. 

### Our Approach to our products

- Fuzzing has one of the largest adoption hurdles of all the Secure products. Coverage fuzzing requires customers to write test harnesses, compile applications with special settings and generates highly technical output.

Web API Fuzzing requires generating files that allow the Web API fuzzing tool to know what parts of the application to fuzz. 

Our goals is to simplify and reduce as many of the steps that a customer needs to do to get started.  We want to focus our efforts on creating samples, defaults, and  intelligence that will simplify fuzzing onboarding.

### Specialized Labels

We use additional labels to categorize different areas of the application.
~"fuzzing::coverage"
~"fuzzing::api"
~"fuzzing::protocol"

### Community Contributions

The Fuzz Testing group welcomes community contributions. Any community contribution should get prompt feedback from one of the fuzzing engineers. All engineers on the Fuzz  team are responsible for
working with community contributions. If a team member does not have time to review a community contribution, please tag the Engineering Manager, so that they can assign the community contribution to another team member.  


## Issue Boards

* [Fuzzing Planning Board - API Fuzzing](https://gitlab.com/groups/gitlab-org/-/boards/1655608?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Afuzz%20testing&not[label_name][]=fuzzing%3A%3Acoverage)
* [Fuzzing Planning Board - Coverage Guided](https://gitlab.com/groups/gitlab-org/-/boards/1655608?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Afuzz%20testing&not[label_name][]=fuzzing%3A%3Aapi)
* [Fuzzing Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/1924313?&label_name[]=group%3A%3Afuzz%20testing)
* [Fuzzing EM Board](https://gitlab.com/groups/gitlab-org/-/boards/2445785?&label_name[]=group%3A%3Afuzz%20testing)
* [Fuzzing Epics](https://gitlab.com/groups/gitlab-org/-/epics?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Afuzz%20testing)

