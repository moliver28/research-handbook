---
layout: handbook-page-toc
title: Secure / Protect sub-department delineation
description: "Definion of what engineering group is reponsibile for features in the Secure and Protect stages of the GitLab product"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Why does this page exist?

In the spirit of establishing a [DRI](/handbook/people-group/directly-responsible-individuals/) for each set of functionality where this may not be obvious, the purpose of this page is to explicitly define which engineering group has reponsibility for which portions of the product and for specific decisions.

## Page/Function responsibilities

| Page/Function | PM | Primary Group | Example |
| ---      | ---      | ---      | ---      |
| [Dependency List](https://docs.gitlab.com/ee/user/application_security/dependency_list/) | <%= link_to_team_member('sam.white') %> | [Secure:Composition Analysis](/handbook/product/categories/#composition-analysis-group) | [Example](https://gitlab.com/gitlab-examples/security/security-reports/-/licenses#licenses) |
| [Interact with findings and vulnerabilities](https://docs.gitlab.com/ee/user/application_security/index.html#interact-with-findings-and-vulnerabilities) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) |  |
| [License Compliance](https://docs.gitlab.com/ee/user/compliance/license_compliance/) | <%= link_to_team_member('sam.white') %> | [Secure:Composition Analysis](/handbook/product/categories/#composition-analysis-group) |  |
| [Merge Request Security Widget](https://docs.gitlab.com/ee/user/application_security/#view-security-scan-information-in-merge-requests) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) | [Example](https://gitlab.com/gitlab-org/security-products/tests/webgoat/-/merge_requests/26) |
| [Pipeline Security Tab](https://docs.gitlab.com/ee/user/application_security/security_dashboard/#view-vulnerabilities-in-a-pipeline) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) | [Example](https://gitlab.com/gitlab-org/security-products/tests/webgoat/-/pipelines/155052050/security) |
| [Secure Partner Onboarding Docs](https://docs.gitlab.com/ee/development/integrations/secure_partner_integration.html) | <%= link_to_team_member('stkerr') %> | [Sec by their categories](/handbook/product/categories/#sec-section) |  |
| [Security Configuration](https://docs.gitlab.com/ee/user/application_security/configuration/) | [Sec by their categories](/handbook/product/categories/#sec-section) |  |  |
| [Security Dashboards](https://docs.gitlab.com/ee/user/application_security/security_dashboard) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) | [Example](https://gitlab.com/gitlab-examples/security/security-reports/-/security/dashboard) |
| [Security Scanner Integration Documentation](https://docs.gitlab.com/ee/development/integrations/secure.html) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) |  |
| [Vulnerability Pages](https://docs.gitlab.com/ee/user/application_security/vulnerabilities/) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) | [Example](https://gitlab.com/gitlab-examples/security/security-reports/-/security/vulnerability_report) |
| [Vulnerability Report](https://docs.gitlab.com/ee/user/application_security/vulnerability_report/) | <%= link_to_team_member('matt_wilson') %> | [Secure:Threat Insights](/handbook/product/categories/#threat-insights-group) | [Example](https://gitlab.com/gitlab-org/threat-management/webgoat/-/security/vulnerabilities) |

## Technical Boundaries

Ownership of the end-to-end technical solution spans multiple groups. This section clarifies
cross-group maintainership of code artifacts between [Threat
Insights](/handbook/product/categories/#threat-insights-group) and the remaining groups in
the [Secure Stage](/handbook/product/categories/#secure-stage).

The diagram below is an over-simplified representation of the architecture but helps understand the
delineation.

```mermaid
%% editing these is easier using the live editor: https://mermaid-js.github.io/mermaid-live-editor/

graph TD
  subgraph "Secure Stage, excluding Threat Insights"
    SR["Scanner Report<br>(json report)"]
    P(Parsers)
    JS[schema]
    RF[Report Findings]
    JS --- P
    P --> RF
    SR --> P
  end

  subgraph "Threat Insights"
    VF[(Vulnerability Findings)]
    VFS[schema]
    V[(Vulnerability)]
    VS[schema]
    VFS --- VF
    VS --- V
  end

  RF --> VF --> V
```

### Approval process

Issues are used to make the DRI and their backup aware of the change. In case a DRI is unavailable,
their line manager is the backup.

Merge Requests use [Code Owners](https://gitlab.com/gitlab-org/gitlab/-/blob/master/.gitlab/CODEOWNERS) to [enforce approval](https://docs.gitlab.com/ee/user/project/code_owners.html#approvals-by-code-owners) of changes.


#### Vulnerability Management Database Schema

* Product DRI: Matt Wilson.
* Engineering DRI: Thiago Figueiro.


#### [Security Report Schema](https://gitlab.com/gitlab-org/security-products/security-report-schemas)

The reports JSON schemas are maintained by the relevant Secure groups (Backend team) matching the corresponding categories.
For instance, the Static Analysis group is responsible for the SAST category, so its backend team is responsible for the `sast` report JSON schema.
Additionally, any modification of the shared definitions and structure must be approved by each group's backend team.

#### Comparison and tracking logic

All types of vulnerabilities follow the same generic comparison and tracking logic in the rails application based on the report type, primary identifier, and location fingerprint. While the way to generate the location fingerprint may vary from one type of report to another, the logic to compare and track is still generic and managed by Threat Insights. Any improvement of that logic that is specific to a given report type is under the responsibility of the corresponding group (e.g. Static Analysis group would be the maintainer of any improvement to track SAST vulnerabilities).
