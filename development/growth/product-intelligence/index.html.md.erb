---
layout: handbook-page-toc
title: Product Intelligence Group
description: "The Product Intelligence group work on feature enhancements and implementing privacy focused product analytics across GitLab projects"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Vision

The Product Intelligence Group is part of the [Growth section](/handbook/engineering/development/growth/). Our group focuses on providing GitLab's team with data-driven product insights to build a better GitLab. To do this, we build data collection and analytics tools within the GitLab product in a privacy-focused manner. Insights generated from Product Intelligence enables us to identify the best places to invest people and resources, what product categories mature faster, where our user experience can be improved, and how product changes impact the business. You can learn more about what we're building next on the [Product Intelligence Direction page](/direction/product-intelligence/).


How we work:
- We work in accordance with our [GitLab values](/handbook/values/).
- We work [transparently](/handbook/values/#transparency) with nearly everything public.
- We get a chance to work on the things we want to work on.
- We have a [bias for action](/handbook/values/#bias-for-action).
- We make data-driven decisions.
- Everyone can contribute to our work.

**I have a question. Who do I ask?**
Questions should start by @ mentioning the product manager for the [Product Intelligence Group](/handbook/product/categories/#product-intelligence-group) or by creating an issue in our [issue board](/handbook/engineering/development/growth/product-intelligence/#issue-boards).

## Team members

The following people are permanent members of the Product Intelligence Group:

<%= direct_team(manager_role: 'Interim Fullstack Engineering Manager, Product Intelligence') %>

## Project management process

Our team uses a hybrid of Scrum for our project management process. This process follows GitLab's [monthly milestone release cycle](/handbook/marketing/blog/release-posts/#monthly-releases).

- We only work off of issue boards which act as our single source of truth.
- We continuously progress issues to the next workflow stage.
- We work on both product and engineering initiatives.
- We prioritize and estimate all issues we work on.
- We do weekly refinement to ensure our issue board is always kept up to date.
- We do monthly milestone planning to prepare for our upcoming milestone.


### Workflow

Our team use the following workflow stages defined in the [Product Development Flow](/handbook/product-development-flow/#workflow-summary):

#### Validation stage

| Label | Usage |
| -- | -- |
| `~"workflow::validation backlog"` | Applied by the Product Manager for incoming issues that have not been refined or prioritized. |
| `~"workflow::problem validation"` | Applied by the Product Manager for issues where the PM is developing a thorough understanding of the problem |
| `~"workflow::design"` | Applied by the Product Manager or Designer (or Product Intelligence Engineer) to ideate and propose solutions. The proposed solutions should be reviewed by engineering to ensure technical feasibility. |
| `~"workflow::solution validation"` | Applied by the Product Manager or Designer (or Product Intelligence Engineer) to validate a proposed solution through user interviews or usability testing. |

#### Build stage

| Label | Usage |
| -- | -- | -- |
| `~"workflow::planning breakdown"` | Applied by the Product Manager for Engineers to begin breaking down issues and adding estimates. |
| `~"workflow::ready for development"` |  Applied by either Engineering or Product Manager after an issue has been broken down and scheduled for development. |
| `~"workflow::in dev"` | Applied by the Engineer after work (including documentation) has begun on the issue. An MR is typically linked to the issue at this point. |
| `~"workflow::in review"` | Applied by the Engineer indicating that all MRs required to close an issue are in review. |
| `~"workflow::verification"` | Applied by the Engineer after the MRs in the issue have been merged, this label is applied signaling the issue needs to be verified in staging or production. |
| `~"workflow::production"` | Applied by the Engineer after all MRs have merged and the issue has been verified. At this step, the issue should be closed as complete. |
| `~"workflow::blocked"` | Applied by any team member if at any time during development the issue is blocked. For example: technical issue, open question to PM or PD, cross-group dependency. |


### Epic roadmap

We use an epic roadmap to track epic progress on a quarterly basis. The epic roadmap is a live view of the [Product Intelligence Direction page](/direction/product-intelligence/).

To keep things simple, we primarily use the [gitlab.com/gitlab-org](https://gitlab.com/gitlab-org/) group for our roadmap. If epics are created on the [gitlab.com/gitlab-com](https://gitlab.com/gitlab-com/) and [gitlab.com/gitlab-services](https://gitlab.com/gitlab-services/) groups, we create placeholders of them on [gitlab.com/gitlab-org](https://gitlab.com/gitlab-org/) so that all epics show up in a single roadmap view.

| gitlab-org | gitlab-com | gitlab-services | all groups |
| ------ | ------ | ------ | ------ |
| [gitlab-org Epic Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?state=opened&sort=start_date_asc&label_name%5B%5D=group%3A%3Aproduct+intelligence) | [-](https://gitlab.com/groups/gitlab-com/-/roadmap?state=opened&sort=start_date_asc&label_name%5B%5D=group%3A%3Aproduct+intelligence) | [-](https://gitlab.com/groups/gitlab-services/-/roadmap?state=opened&sort=start_date_asc&label_name%5B%5D=group%3A%3Aproduct+intelligence) | |

### Issue boards

We use issue boards to track issue progress on a daily basis. Issue boards are our single source of truth for the status of our work. Issue boards should be viewed at the highest group level for visibility into all nested projects in a group.

There are three groups we use:
- The [gitlab.com/gitlab-org](https://gitlab.com/gitlab-org/) group includes the [gitlab](https://gitlab.com/gitlab-org/gitlab), [customers-gitlab-com](https://gitlab.com/gitlab-org/customers-gitlab-com), and [license-gitlab-com](https://gitlab.com/gitlab-org/license-gitlab-com) projects.
- The [gitlab.com/gitlab-com](https://gitlab.com/gitlab-com/) group includes the [www-gitlab-com](https://gitlab.com/gitlab-com/www-gitlab-com) project.
- The [gitlab.com/gitlab-services](https://gitlab.com/gitlab-services/) group includes the [version-gitlab-com](https://gitlab.com/gitlab-services/version-gitlab-com) project.
- The [Issue Board by Milestone](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence) provides a view across all projects, organized by milestone. This is board is critical to the planning process and allows the Product Manager to prioritize the milestone. 

| gitlab-org | gitlab-com | gitlab-services | all groups |
| ------ | ------ | ------ | ------ |
| [gitlab-org Issue Board](https://gitlab.com/groups/gitlab-org/-/boards/1158847?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Agrowth&label_name[]=group%3A%3Aproduct%20intelligence) | [gitlab-com Issue Board](https://gitlab.com/groups/gitlab-com/-/boards/1546862?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Agrowth&label_name[]=group%3A%3Aproduct%20intelligence) | [gitlab-services Issue Board](https://gitlab.com/groups/gitlab-services/-/boards/1546865?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Agrowth&label_name[]=group%3A%3Aproduct%20intelligence) | [Issue Board by Milestone](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence) |


### Prioritization

We prioritize our product roadmap in the [Issue Board by Milestone](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence). Issues appear on each list in order of priority and prioritization of our product roadmap is determined by our product managers. 

### Picking something to work on

Engineers can find and open [the milestone board for Product Intelligence](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence). Engineers should start at the top of the board and pick the first available, non-assigned issue which is labeled `Ready for development`. When picking an issue, the engineer should assign themselves as a signal that they are taking ownership of the issue.

If the next available issue is not a viable candidate (due to amount of capacity vs. issue weight, complexity, knowledge domain, etc.) the engineer may choose to skip an issue in milestone list and pick the next issue in order of priority. 

The following table will be used as a guideline for scheduling work within the milestone:

| Type        | % of Milestone | Description                                                                                |
|-------------|----------------|-------------|------------------------------------------------------------------------------|
| Deliverable | 70%            | business priorities (compliance, IACV, efficiency initiatives)                             |
| Tech debt   | 10%            | nominated by engineers prior to milestone start in Milestone Planning Issue                                                                                           |
| Other       | 20%            | engineer picks, critical security/data/availability/regression, urgent business priorities |

If all work within a milestone is picked, engineers are free to choose what to work on. Acceptable options include:

- Post in Slack channel to see if any engineers would like help/pair on something they are working on
- Pick an issue from the next milestone (using the [board by milestone view](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence))
- Pick an issue from the [backlog](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Aproduct%20intelligence&milestone_title=Backlog)
- Create/work on tech debt issue
- Work on a passion issue
- Other (study, research, learning)

### Iteration

We follow the [iteration process](/handbook/engineering/#iteration) outlined by the Engineering function.

### Estimation

We follow the [estimation process](/handbook/engineering/development/growth/#estimation) outlined by the Growth sub-department.

### Due dates

To properly set expectations for product managers and other stakeholders, our team may decide to add a due date onto an issue. Due dates are not meant to pressure our team but are instead used to communicate an expected delivery date.

We may also use due dates as a way to timebox our iterations. Instead of spending a month on shipping a feature, we may set a due date of a week to force ourselves to come up with a smaller iteration.

### Weekly refinement

Refinement is the responsibility of every team member. Every Friday, Slack will post a refinement reminder in our group channel. During refinement, we make sure that every issue on the issue board is kept up to date with the necessary details and next steps.

Each engineer is expected to provide a quick async issue update by commenting on their assigned issues using the following template:

```
<!---
Please be sure to update the workflow labels of your issue to one of the following (that best describes the status)"
- ~"workflow::In dev"
- ~"workflow::In review"
- ~"workflow::verification"
- ~"workflow::blocked"
-->
### Async issue update
1. Please provide a quick summary of the current status (one sentence).
1. When do you predict this feature to be ready for maintainer review?
1. Are there any opportunities to further break the issue or merge request into smaller pieces (if applicable)?
1. Were expectations met from a previous update? If not, please explain why.
```

We do this to encourage our team to be more async in collaboration and to allow the community and other team members to know the progress of issues that we are actively working on.

### Out of office coverage process

An OOO coverage process helps reduce the mental load of "remembering all the things" while preparing for being away from work. This process allows us to organize the tasks we need to complete before time off and make the team successful.

Open a new issue in the [Product Intelligence project](https://gitlab.com/gitlab-org/product-intelligence/-/issues) with the [`out_of_office_coverage_template`](https://gitlab.com/gitlab-org/product-intelligence/-/blob/master/.gitlab/issue_templates/out_of_office_coverage_template.md).


### Milestone Planning and Timeline

Our team mostly follows the [Product Development Timeline](/handbook/engineering/workflow/#product-development-timeline) as our group is dependent on the [GitLab self-managed release cycle](https://about.gitlab.com/upcoming-releases/).

The specific application of this timeline to the Product Intelligence Milestone planning process is summarized below and in this recorded overview [video](https://youtu.be/dcO-Qbd042E).

#### Overview

| Phase           | Time                     | 
|-----------------|--------------------------|
| Planning Phase  | Prior to 18th of Month N |
| Breakdown Phase | 18th – 22nd              |
| Development Phase   | 23rd - 17th of Month N+1 |

#### 1. Planning Phase

**Timeline**: Latest one week prior the start of the next milestone

**Tasks**:
1. PM: Milestone planning issue gets created.  
  We utilize a planning issue to keep our team organized during the planning phase. Here is an [example milestone planning issue](https://gitlab.com/gitlab-org/gitlab/-/issues/331864). 
1. PM: Issues are added to the [Issue Board by Milestone](https://gitlab.com/groups/gitlab-org/-/boards/2774881?label_name%5B%5D=group%3A%3Aproduct%20intelligence).  
    Issues at this stage will have the `~"workflow::planning breakdown"` label.
1. PM: orders the issue board by priority
1. PM: shares the roadmap as part of our Product Intelligence Sync meetings as a separated recorded video
1. Engineers: indicate reduced capacity by adding planned time off in the [Planning Spreadsheet](https://docs.google.com/spreadsheets/d/1bqImTa34jTrEjFEfU8j4yHrzk29xyrWinTjgstYlrg4/) (internal link)

**Definition of done**: Milestone issue is created and we have an estimated capacity.

#### 2. Breakdown Phase

This time will be used to:
1. Review issue description for understanding and thoroughness
1. Ask questions
1. Break issue into smaller parts 
1. Create a first technical plan
1. Add issue weight

This Phase does not include time for complex technical proposals. They will be worked on in the "Development Phase" of the milestone.

**Timeline**: 18th - 22nd of the month.

**Tasks**:
1. All: **[Team Retrospectives](/handbook/engineering/management/team-retrospectives/) for prior milestone begins. 
1. PM: updates the planning issue with the weights closed in the prior milestone and the weights for the current milestone.
1. PM: moves any open issues from the prior milestone to the new milestone and apply the `missed::x.xx` label.
1. PM: will ping engineering team on Planning Issue asking for Technical Debt candidates.
1. PM: invites engineering to breakdown issues planned.
1. Engineers: bring up Technical Debt candidates.
1. Engineers: weight issues.
1. Engineers: break down issues by posting a rough technical plan on each issue that has a weight bigger than 2.
1. Engineers: coordinate with FE & BE work.
1. Engineers: self-organize sync calls to discuss issues in depth.
1. Engineers: link related and blocked issues

**Definition of done**
1. Engineering completes issue refinement, all issues are weighted & have a rough technical plan if weight is above 2.
1. Engineering or Product Manager updates issue label to `~"workflow::ready for development"`

#### 3. Development Phase: 
- **Timeline**: 23rd of the month – 17th of next month.
- **Tasks**:
1. PM: adds/removes issues if the board is over/under target weight.
1. PM: finalizes Planning Issue and pings engineering team. 
1. Engineers: work on the planned issues.
1. Engineers: can pick issues that are unassigned and label them with `~"workflow::in dev"`.  
    Issues get assigned once an engineer starts working on it.

#### Milestone Capacity

Our milestone capacity tells us how many issue weights we can expect to complete in a given milestone. This is calculated by taking the sum of issue weights completed in the last milestone prorated by holidays. If there is a large variation in the estimated capacity of the last milestone and the one before it, we will use an average estimated capacity of the last few milestones. Here is an example of how we calculate capacity:

**Last Milestone:**
* **Total weights completed:** 24
* **Available work days:** 21.6 * 1 engineers = 21.6 available days
* **Actual work days:** 21.6 available days - 5 days off = 16.6 actual days
* **Ratio of available:actual work days:** 21.6 / 16.6 = 1.30
* **Maximum capacity:** 24 * 1.3 = 31 weights

**Current Milestone:**
* **Available work days:** 21.6 days * 1 engineers = 21.6 available days
* **Actual work days:** 21.6 av-days - 0 days off = 21.6 actual days
* **Ratio of available:actual work days:** 21.6 / 21.6 = 1
* **Maximum capacity:** 31 * 1 = 31 weights

In this example, the current milestone capacity is 31 weights.

#### Milestone Commitment

A milestone commitment is a list of issues our team aims to complete in the milestone. The product team follows our GitLab pricinciple of [planning ambitiously](https://about.gitlab.com/handbook/product/product-principles/#how-this-impacts-planning) and therefore expect that we won't always be able to deliver everything that we wanted in every milestone. After issues are broken down, estimated, and prioritized, the product manager will apply the `~Deliverable` label to applicable issues. Issues marked with the `~Deliverable` label represent the commitment we are intending to ship in that milestone.

## Epics and issues

To help our team be [efficient](/handbook/values/#efficiency), we explicitly define how our team uses epics and issues.

### Epic and issue creation

We aim to create issues in the same project as where the future merge request will live. And we aim to create epics at the topmost-level group that makes the most sense for its collection of child epics and issues. For example, if an experiment is being run in the CustomersDot, the epic should be created in the `gitlab-org` group, and the issue should be created in the `gitlab-org/customers-gitlab-com` project.

We emphasize creating the epic at the topmost-level group so that it will show up on our epic roadmap. And we emphasize creating the issue in the right project to avoid having to close and move it later in the development process. If the location of the future merge request cannot be determined, we will create the issue in our catch-all [growth team-tasks project](https://gitlab.com/gitlab-org/growth/team-tasks/issues).

### Ratio of issues to MRs

We used to aim for a 1:1 ratio between issues and merge requests, mainly for the sake of status visibility at the issue board level. We have since moved to using epics and the epic roadmap for product management visibility, and we are comfortable with the amount of status updates received during our weekly sync meetings as well as through comments within issues themselves.

If an issue requires multiple merge requests, we no longer recommend splitting the issue itself up in order to maintain a 1:1 ratio of issues to MRs. The advantage is that an engineer is able to create an arbitrary number of MRs for a single issue and can move much more quickly through them. The trade-off is that doing so makes it more difficult to communicate the overall status of the issue itself. It is the engineer's responsibility to make sure that the status of each issue they are working on is effectively communicated to their Product Manager.

### Epics

We group related issues together using parent [epics](https://docs.gitlab.com/ee/user/group/epics/) and child epics, providing us with a better visual overview of our roadmap.

- The description of the parent epic should always be kept up-to-date as the single source of truth.
- The conversation about the implementation or design is done in issues.
- Designs in progress will be in UX issues, using the design tab for conversation, review, feedback, exploration, etc.
- The final designs should be linked in the parent epic description.
- Epics and Child Epics must have the same section and group labels to see them on our roadmap.
- We use the prefixes `[ENG]`, `[UX]` and `[Product]` to indicate their area of focus. The prefixes can be combined if the epic holds issues of different areas, e.g. `[ENG][UX]`.
- We use the labels `Engineering` and `UX` to easily filter epics.

#### Issue handover and breakdown

After a design is done, the design issue needs to be set to `workflow::planning breakdown` and engineering takes over the process of breaking it down. The design issue can be closed after break down is done.

#### How To Structure Epics

Epics can contain issues and/or child epics. A child epic could for example be the first iteration of the parent epic.
An example of how the structure of an epic could look:

- Parent Epic
  - Child Epic 1: First Iteration
    - Issue: Design Task 1
    - Issue: Design Task 2
    - Issue: Engineering Task 1
    - Issue: Engineering Task 2
  - Child Epic 2: Second Iteration
    - Issue: Design Task 3
    - Issue: Engineering Task 3
  - Child Epic 3: API Changes
    - Issue: Engineering Task 4
    - Issue: Engineering Task 5
  - Issue: Engineering Task 6
  - Issue: Engineering Task 7

#### Using epics across groups

Epics have the following limitations:

- Epics can only link issues that are within the same group. For example, it's not possible to link an issue in `gitlab-org` from an epic created in `gitlab-org/growth`.
- Epics can't link issues across different top level groups. For example, an epic created in `gitlab-org` can't link to an issue created in `gitlab-services`.

To overcome this, we will:

- Always create epics in the top level group, e.g. [`gitlab-org`](https://gitlab.com/groups/gitlab-org/-/epics`), [`gitlab-com`](https://gitlab.com/groups/gitlab-com/-/epics`), or [`gitlab-services`](https://gitlab.com/groups/gitlab-services/-/epics`).
- Create placeholder epics that link to the other top-level group epic. These placeholders get created automatically when pasting a link to an epic of another top-level group epic

The parent epic should live on the top-level group where most of the issues and child epics will be created.

### Issue labels

We use issue labels to keep us organized. Every issue has a set of required labels that the issue must be tagged with. Every issue also has a set of optional labels that are used as needed.

**Required labels**
- [Stage:](/handbook/engineering/development/growth/#how-we-work) `~devops::growth`
- [Group:](/handbook/engineering/development/growth/#how-we-work) `~group::product intelligence`
- [Workflow:](/handbook/product-development-flow/#workflow-summary) `~"workflow::planning breakdown`, `~"workflow::ready for development`, `~"workflow::in dev`, etc.

**Optional labels**
- [Experiment:](/handbook/engineering/development/growth/#experiment-issue-creation) `~growth::experiment`
- [Experiment Status:](/handbook/engineering/development/growth/#experiment-issue-creation) `~"experiment::active`, `~"experiment::validated`, etc.
- [Release Scoping:](https://gitlab.com/gitlab-org/gitlab-foss/blob/master/doc/development/contributing/issue_workflow.md) `~Deliverable`
- [UX:](/handbook/engineering/development/growth/#ux-workflows) `UX`
- Other labels in [issue workflow](https://gitlab.com/gitlab-org/gitlab-foss/blob/master/doc/development/contributing/issue_workflow.md)

### Merge request labels

MR labels can mirror issue labels (which is automatically done when created from an issue), but only certain labels are required for correctly [measuring engineering performance](#measuring-engineering-performance).

**Required labels**
- [Stage:](/handbook/engineering/development/growth/#how-we-work) `~devops::growth`
- [Group:](/handbook/engineering/development/growth/#how-we-work) `~group::product intelligence`
- [Type:](/handbook/engineering/metrics/#data-classification) `~security`, `~bug`, `~feature`, `~tooling`, `~documentation`

### Milestones

We tag each issue and MR with the planned milestone or the milestone at time of completion.

## Team Meetings

Our group holds synchronus meetings to gain additional clarity and alignment on our async discussions. We aim to record all of our meetings as our team members are spread across several timezones and often cannot attend at the scheduled time.

### Meeting rules

* Agenda items should be filled in 6 hours before meetings otherwise it's possible to cancel the meeting.
* It's fine to add agenda items during the meeting as things come up in sync meetings we might not have thought about beforehand.
* Meetings start :30 seconds after start time
* Whoever has the first agenda item starts the meeting.
* Whoever has the last agenda item ends the meeting.
* Meetings end early or on time.
* Any missed agenda items are bumped to the next meeting.

### Our meetings

* **Product Intelligence Sync:** an optional weekly meeting for the Product Intelligence team to discuss any topics they please.
* **Product Intelligence and Data Sync:** an optional weekly meeting for the Product Intelligence and Data teams to discuss cross-functional initiatives the teams are working on.
* **Usage Ping Pairing:** an optional weekly meeting for engineers to pair program with each other on our Usage Ping tooling.
* **Snowplow Pairing:** an optional weekly meeting for engineers to pair program with each other on our Snowplow tooling.
* **Product Intelligence Team Social:** an optional bi-weekly call for our team to hang out and socialize.

## Measuring Engineering Performance

See the [Growth Section Performance Indicators](/handbook/engineering/development/performance-indicators/growth/) as well as the
[Centralized Engineering Dashboards](/handbook/engineering/metrics/).

We recognize that just as [an issue may be broken down into multiple merge requests](#ratio-of-issues-to-mrs), so can iteration of a feature be spread across several MRs, especially with the use of [feature flags](https://docs.gitlab.com/ee/development/feature_flags/process.html#feature-flags-in-gitlab-development).

We aim for the current [development department merge request rate](/handbook/engineering/development/performance-indicators/#development-department-mr-rate)
which is tracked using our [Growth Section Performance Indicators](/handbook/engineering/development/performance-indicators/growth/).

## Product Intelligence dbt development process

[Dbt](../../../business-technology/data-team/platform/dbt-guide/#what-and-why), short for data build tool, is an open source project for managing data transformations in a data warehouse.
The data warehouse and dbt are managed by the [Data team](../../../business-technology/data-team).
In order to reduce cycle time, increase understanding, and enable the Product Intelligence team to fully own collected metrics, the Product Intelligence team should be empowered to develop and modify data models
that represents Product Intelligence metrics.

### Requirements

1. Access to the Snowflake data warehouse: follow the [access request](../../../business-technology/team-member-enablement/onboarding-access-requests/access-requests/) process. For example: [confidential Snowflake access request issue](https://gitlab.com/gitlab-com/team-member-epics/access-requests/-/issues/8026).
1. Dedicated development database in Snowflake: create an issue in the [analytics project](https://gitlab.com/gitlab-data/analytics/-/issues) and `@` mention a person in a role of Senior Manager Data at Gitlab (`@dvanrooijen2` currently). For example: [database setup issue](https://gitlab.com/gitlab-data/analytics/-/issues/9216).

### Set up

Please follow the [configuration guide](../../../business-technology/data-team/platform/dbt-guide/#configuration) provided by Data team.
If you've been granted access to the Snowflake data warehouse via Okta SSO, you will not be able to use Docker to set up dbt. Instead, follow the [venv workflow](../../../business-technology/data-team/platform/dbt-guide/#Venv-workflow). You will also need to alter `profiles.yml`.
replacing `password: YOUR PASSWORD` with `authenticator: externalbrowser`.

### Contributing to the analytics project

When contributing to the [analytics](https://gitlab.com/gitlab-data/analytics/-/tree/master/transform/snowflake-dbt/models) repository, please follow the style and development [guides](../../../business-technology/data-team/platform/dbt-guide/#style-and-usage-guide).

This [internal video](https://www.youtube.com/watch?v=xCx5ZLrBOQQ) contains a condensed introduction to dbt.

A high level overview of the contribution process is as follows:

1. Locate the correct subdirectory in the [models](https://gitlab.com/gitlab-data/analytics/-/tree/77654fbf1c8968f584c77c8895cc9ef11f741320/transform/snowflake-dbt/models) directory of the analytics project, for example: `models/legacy/snowplow/month_partition/base`.
1. Create a file for the new model, for example: `snowplow_gitlab_events_standard_context.sql`.
1. Add documentation and [test](https://docs.getdbt.com/docs/building-a-dbt-project/tests) entries into the `schema.yml` file within the model's parent folder (the one from step #1).
1. Run your model with [`$ dbt run -m model_name`](https://docs.getdbt.com/reference/commands/run). It runs models and outputs SQL representation within the `target` directory at the location corresponding to the model location, for example: `target/compiled/gitlab_snowflake/models/legacy/snowplow/month_partition/base/snowplow_gitlab_events_standard_context.sql`.
1. Copy SQL and run it in Snowflake (please use XS warehouse to minimize the cost) to check if it works.
1. If the models should be included as a building piece of other models, alter the corresponding files (use [Lineage Graph](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.snowplow_gitlab_events?g_v=1&g_i=%2Bsnowplow_gitlab_events%2B) from dbt documentation to locate models that might need to be updated).
1. Commit your changes and create a merge request.
1. Trigger a production test by running a manual `➕🐭specify_model` job within the `⚙️ dbt Run` stage. You have to specify the models to test by providing proper selector with `DBT_MODELS` job environment variable.
1. After all tests pass successfully, ask the Data Analyst responsible for product data models (currently `@mpeychet_`) for a review.

## Onboarding

All new team members to the Product Intelligence teams are provided two onboarding issues to help ramp up on our analytics tooling. New team member members should create their own onboarding issues in the [gitlab-org/product-intelligence project](https://gitlab.com/gitlab-org/product-intelligence/-/issues) and use the `service_ping_onboarding` and `snowplow_onboarding` templates.


## Quick Links

| Resource                                                                                                                          | Description                                               |
|-----------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------|
| [Product Intelligence Guide](/handbook/product/product-intelligence-guide)                                                                              | A guide to Product Intelligence                   |
| [Usage Ping Guide](https://docs.gitlab.com/ee/development/usage_ping/)                                                        | An implementation guide for Usage Ping                    |
| [Snowplow Guide](https://docs.gitlab.com/ee/development/snowplow/index.html)                                                            | An implementation guide for Snowplow                      |
| [Event Dictionary](/handbook/product/product-intelligence-guide#event-dictionary)                                        | A SSoT for all collected metrics and events               |
| [Privacy Policy](/privacy/)                                                                                                       | Our privacy policy outlining what data we collect and how we handle it     |
| [Implementing Product Performance Indicators](/handbook/product/product-intelligence-guide#implementing-product-performance-indicators)                                   | The workflow for putting product performance indicators in place   |
| [Product Intelligence Direction](/direction/product-intelligence/)                                                                              | The roadmap for Product Intelligence at GitLab                       |
| [Product Intelligence Development Process](/handbook/engineering/development/growth/product-intelligence/) | The development process for the Product Intelligence groups         |
| [Growth Product Direction](/direction/growth/)                                                                                    | The roadmap for Growth at GitLab                          |
| [Growth Product Handbook](/handbook/product/growth/)                                                                              | The product process for the Growth sub-department         |
| [Growth Sub-Department Development Process](/handbook/engineering/development/growth/).                                              | The development process for the Growth sub-department     |
| [Growth Sub-Department Performance Indicators Process](/handbook/engineering/development/performance-indicators/growth/)              | The performance indicators for the Growth sub-department  |
| [Growth UX Process](/handbook/product/growth/)                                                        | The UX process for the Growth sub-department              |
| [Growth QE Process](/handbook/engineering/quality/fulfillment-growth-qe-team/)                                                                   | The QE process for the Growth sub-department              |
| [GitLab Performance Snowplow Dashboards ](./gitlab_com_performance_dashboard.html) | Performance dashbaords for GitLab.com via Snowplow  |

