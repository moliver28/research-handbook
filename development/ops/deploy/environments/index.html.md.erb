---
layout: handbook-page-toc
title: Environments Group
description: "The Environments group is responsible for the Environments in the Deploy stage of the DevOps lifecycle."
---


## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Vision

For an understanding of where this team is going, take a look at [the product](/direction/delivery/)
vision.

As a member of the Ops Sub-department, you may also like to understand [our](/direction/ops/)
overall vision.

## Mission

### OKRs


### Product Indicators


### Contribution to GitLab


## Team Members

<%= direct_team(manager_slug: 'nicolo-maria-mezzopera') %>

## Stable Counterparts

The following members of other functional teams are our stable counterparts:

<%= stable_counterparts(role_regexp: /[,&] Environments/, manager_slug: 'nicolo-maria-mezzopera') %>

## Common Links

- [General Slack channel](https://gitlab.slack.com/archives/s_)
- [Standup Slack channel](https://gitlab.slack.com/archives/s)
- [Social Slack channel](https://gitlab.slack.com/archives/s)

Some dedicated Slack channels:

* Agent for Kubernetes: [`f_agent_for_kubernetes`](https://gitlab.slack.com/archives/f_agent_for_kubernetes)
* Terraform backend: [`f_terraform_backend`](https://gitlab.slack.com/archives/f_terraform_backend)
* [Terraform provider](https://gitlab.com/gitlab-org/terraform-provider-gitlab): [`terraform-provider`](https://gitlab.slack.com/archives/terraform-provider)
* Auto DevOps: [`f_autodevops`](https://gitlab.slack.com/archives/f_autodevops)
* Environments Detail Page: [`#f_environment_details_page`](https://gitlab.slack.com/archives/C04N1P3B3UL)

## Insights

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Ochestrate" } %>

## Processes

### Acronyms 

- Engineers: All the Engineers of the Environments group
- Engineering: Engineers and the Engineering Manager
- EM: Engineering Manager
- PM: Product Manager
- FE: Frontend Engineer
- BE: Backend Engineer
- UX/PD: User Experience Designer
- TW: Technical Writer

### Issue refinement

Every week the [refinement bot](https://gitlab.com/gitlab-org/ci-cd/deploy-stage/environments-group/refinement) assigns a team member as the refinement DRI, who is responsible for refining **4 issues from the top of the `~"workflow::refinement"` list** (the list is prioritised top to bottom) in the [Milestone Board](#milestone-board) **and another issue of their choice** with a ping to the EM and/or PM explaining the reasoning.

The refinement process is described in the [issue template](https://gitlab.com/gitlab-org/ci-cd/deploy-stage/environments-group/refinement/-/blob/main/templates/default.erb).

### Technical Discovery meetings

Sometimes we will encounter issues that need the input of the whole team to be refined and then worked on, such issues will be selected as a topic for a Technical Discovery meeting.
We try to be conscious of sync time and so we expect a maximum of two of these meetings for each milestone. 
A technical discovery meeting consists of:

- 2 Meetings across timezones so that everyone has a fair opportunity to join the sync meeting.
    - APAC/EMEA
    - EMEA/AMER
- The 2 meetings are recorded and share the same agenda.
- The meetings are announced at least one week before they will be held and each participant must familiarize themselves with the issue that is being investigated prior to attending one of the meetings.
- Discussing the topic async in advance in the issue/epic is encouraged.
- The PM will open the conversation either by describing the use case/scenario or by recording a quick video about it.
- The meetings are agenda first and everyone is expected to write their comments and questions in the agenda before the first meeting.
- If the agenda is empty the meeting is cancelled.
- The conversations in the meeting must be recorded in the same documents as notes.
- One host is decided for every meeting, and they are responsible to drive the conversation forward.
- In the last meeting someone is appointed to summarize the conversation either in the original issue or a technical document.

The goal of technical discovery meetings is to come up with a concrete technical proposal for the question at hand. We should not force a proposal, but aim to get there and write the conclusion accordingly with potential follow-ups.

### Design pairing

### Planning

#### Milestone Planning

#### Issue Weighting

The weights we use are:

| Weight     | Extra investigation | Surprises    | Collaboration |
| ---------- | ------------------- | ------------ | --------      |
| 1: Trivial | not expected        | not expected | not required  |
| 2: Small   | possible            | possible     | possible      |
| 3: Medium  | likely              | likely       | likely        |
| 5: Large   | guaranteed          | guaranteed   | guaranteed    |

Anything 5 or larger should be broken down, these should not be `ready for development`. We would likely turn a 5 into an epic, into a research and implementation issue or a [technical discovery](TBD).

Occasionally, a proof-of-concept (POC) is necessary to determine a feasible technical path. When one is required, the engineer will create a POC issue that contains the context of the research to be conducted along with the goals of the POC. This
issue will be scheduled for work before any further breakdown of tasks is performed. Once the technical path is clear, the engineer can proceed to weight the issue and/or break down the issue further to guide implementation. Every POC issues should contain a list of questions we want to answer, the definition of done should include the answers and suggested next steps.

Not all POCs will be successful, and that is OK! Some avenues of research may not be successful, and the POC will have saved us from investing significant time in a solution that will not meet our needs. The goal is early feedback and fast iteration.

#### GitLab Terraform Provider

The [GitLab Terraform Provider](/handbook/engineering/projects/#terraform-provider-gitlab) is managed by the Environments group.

### Milestone Board

The issues scheduled for a milestone can be tracked at [Milestone Board](https://gitlab.com/groups/gitlab-org/-/boards/4176401).

This board contains all the necessary columns to track the workflow of the team, in particular:

- `~"workflow::refinement"` the list of issues that needs to be refined before they can be assigned.
- `~"workflow::ready for development"` the list of issues that are ready to be worked on, both assigned and not assigned to the milestone.
- One or more Milestone columns containing the planned work for the given milestone.

All the columns are prioritised top to bottom

#### Feature development

Our goal is to move towards a continuous delivery model so the team completes tasks regularly, and keeps working off of a prioritized backlog of issues. We default to team members self-scheduling their work:

- Team members self-assign issues from the [Milestone Board](https://gitlab.com/groups/gitlab-org/-/boards/4176401?label_name[]=group%3A%3Aenvironments&?not[label_name][]=configure%3A%3Aparked) that are in the `workflow:ready for development` column and has the current milestone.
- Once a team member has completed their assigned issues, they are expected to go to the group issue boards and assign themselves to the next unassigned `workflow:ready for development` issue.
- The issues on the board are in priority order based on importance (the higher they are on the list, the higher the priority). This order is set by the product manager.
- If all issues are assigned for the milestone, team members are expected to identify the next available issue to work on based on the team's work prioritization (see below).
- While backstage work is important, in the absence of specific prioritization, the team will have a bias towards working on `bug` or `feature` categorized issues.

#### Bug fixing and priortized work

In addition to the self-scheduling of feature development, the manager will from time to time assign bugs, or other work deemed important, directly to a team member.

#### Organizing our backlog

### MR reviews

Team members should use their best judgment to determine whether to assign the first review of an MR based on the DangerBot's suggestion or to someone else on the team. Some factors in making this decision may be:

- If there is known domain expert for the area of code, prefer assigning the initial review to them.
- Does the MR require a lot of context to understand what it is doing? Will it take a reviewer outside the team a long time to ramp up on that context?
- Does the MR require a lot of dev environments setup that team members outside the Environments group are likely to not have?
- Is the MR part of a larger effort for which a specific team member already has all the context?

## Quality Processes

Maintaining a high standard of quality is a critical factor to delivering winning products.

Within the Environments group we use the following processes and best practices to ensure high quality.

1. We ensure each MR is accompanied with meaningful unit tests and integration tests.
1. For each major feature we develop and maintain End to End tests that run nightly and confirm no regressions have been introduced to critical paths.
1. On a weekly basis, we review our [Triage report](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#triage-reports) for bugs and regressions and take the appropriate action.
1. We review the [quality dashboard](https://app.periscopedata.com/app/gitlab/736012/Quality-Embedded-Dashboard) each milestone to track our long term progress at improving quality.

#### End to End Testing

The Environments group uses [GitLab QA](https://gitlab.com/gitlab-org/gitlab-qa) for End-to-End testing. We have [guidelines](https://about.gitlab.com/handbook/engineering/development/ops/deploy/environments/quality) for how our team is leveraging these tests.

## Error Budget

Our target availability is 99.95%

## Async Issue Updates

In order to optimize async collaboration across a big team we use issue updates to share progress completed on a specific issue or epic.
Weekly updates on progress and status will be added to each issue by its assignee. A weekly update may be skipped if there was no progress. It's preferable to update the issue rather than the related merge requests, as those do not provide a view of the overall progress. This applies to issues with the labels `workflow::in dev` or `workflow::in review` 

The status comment should include what percentage complete the work is, the confidence of the person that their estimate is correct and, a brief note on what was done. It's perfectly acceptable to have multiple updates if more than one DRI is working on the issue.

As a part of the async update it's important to verify that the issue and related MRs workflow labels are correctly set.

#### Example

```
## Async status update

Complete: 80%
Confidence: 90%
Notes: expecting to go into review tomorrow
```

To simplify the work of adding and keeping track of async updates [TalTal](https://taltal-new.netlify.app/) can be used.

## Career Development and Promotions

We want every team member to be advancing in their Career Development.

We follow the Engineering Department [Career Development Framework](https://about.gitlab.com/handbook/engineering/career-development/).

## Maximize asynchronous performance in this team

We're a highly distributed team.
It's simply hard to find a synchronous call slot that works for everyone,
therefore it's important that our main communication is asynchronous basis and it's well-optimized for our team dynamics.

For example, when you [refine an issue](#issue-refinement),
you would like to collect input from various team members, domain experts and stable counterparts.
Typically, posting a comment with pinging them is enough, however, if the topic is complicated, ambiguous or too broad,
you wouldn't get useful and relevant feedback. This frustrates both you and participants, which should be avoided.

To maximize our asynchronous performance, we should follow [GitLab Communication](https://about.gitlab.com/handbook/communication/) guideline,
More specifically, the following points are important:

- Have an SSOT discussion page (Issue or MR). This is the main collaboration point that everyone can get the latest information quickly.
  The description section should contain essential and up-to-date information, such as:
  - What's the problem to solve?
  - Who's DRI in charge of making the decision?
  - What's the [acceptance criteria](https://www.productplan.com/glossary/acceptance-criteria/) (e.g. user experience goal) ?
  - What's out of scope? (if any)
  - What proposals do we have?
  - What are the PROs/CONs and technical difficulty of each proposal?
  - Whose approval do you need for making the decision?
  - When is the deadline to make the decision?
  - FAQ
- When DRI got additional input in the discussion page (e.g. Discussion threads), DRI should reflect it to the SSOT description.
  - In a discussion thread, focus on the proposed topic. Try to avoid mixing multiple topics or switching to another topic.
- When DRI got additional input outside of the discussion page (e.g. Zoom, Google Doc or Slack), DRI should reflect it to the SSOT description.
- When Reviewer is asked to give input, Reviewer should respond as soon as possible for unblocking discussions.
  It's also fine to respond that you don't have any feedback or can't take time for it, so that DRI can avoid waiting for your response.
- If DRI didn't get much progress from the asynchronous communication, DRI should schedule a synchronous meeting or reach out broader audiences.
- When DRI schedules a sync meeting, DRI should make sure that agendas are prepared before the meeting starts.

## How to work with us

### How to contribute to Auto DevOps

Read our [specific GDK](https://gitlab.com/gitlab-org/gitlab-development-kit/-/tree/main/doc/howto/kubernetes)
instructions as well as our [handbook entry](/handbook/engineering/development/ops/deploy/environments/autodevops/)
on what existing testing does and how to develop features for Auto DevOps.

### Useful links for contributing to Auto DevOps

- [Tips and Troubleshooting](https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/master/doc/howto/kubernetes/tips_and_troubleshooting.md)
- [Useful Commands](https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/master/doc/howto/kubernetes/useful_commands.md)
- [How to work with slow connections](https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/master/doc/howto/kubernetes/tips_and_troubleshooting.md#qa)
- [Enabling premium features for development purposes](https://license.gitlab.com/users/sign_in)
- [Thanos query for complete Auto DevOps pipelines](https://thanos-query.ops.gitlab.net/graph?g0.range_input=2d&g0.max_source_resolution=0s&g0.expr=sum(increase(auto_devops_pipelines_completed_total%7Benv%3D%22gprd%22%7D%5B6h%5D))%20by%20(status)&g0.tab=0)
